<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC（二）</title>
      <link href="//post/079a9ecef3ee/"/>
      <url>//post/079a9ecef3ee/</url>
      
        <content type="html"><![CDATA[<h3 id="Restful-风格"><a href="#Restful-风格" class="headerlink" title="Restful 风格"></a>Restful 风格</h3><ul><li>概述<ul><li>GET用来获取资源</li><li>POST用来新建资源</li><li>PUT用来更新资源</li><li>DELETE用来删除资源</li></ul></li></ul><h3 id="幂等性和安全性"><a href="#幂等性和安全性" class="headerlink" title="幂等性和安全性"></a>幂等性和安全性</h3><ul><li><p>概述</p><ul><li><p>幂等性：</p><ul><li>一个方法多次调用返回的效果(形式)一致，客户端可以重复调用并且 <strong>期望同样的结果 </strong>。 </li><li>一次调用和多次调用产生的 <strong>效果是一致的</strong>，都是对一个变量进行赋值</li></ul></li><li><p>安全性：</p><ul><li>仅指该方法的多次调用不会产生副作用，不涉及传统意义上的“安全”，这里的副作用是指资源状态</li><li>安全的方法不会修改资源状态，尽管多次调用的返回值可能不一样(被其他非安全方法修改过)。</li></ul><p>| HTTP 操作 | <strong>资源操作</strong>  | <strong>幂等性</strong> | <strong>安全性</strong> |<br>| :———-: | :—————-: | :————: | :————: |<br>|    GET    |    SELECT     |     是     |     是     |<br>|   POST    |  INSERT/SAVE  |     否     |     否     |<br>|    PUT    |  UPDATE/EDIT  |     是     |     否     |<br>|  DELETE   | DELETE/REMOVE |     是     |     否     |</p></li><li><p>幂等性：</p><ul><li>简而言之，GET 获取资源，重复调用结果一样</li><li>POST 保存，多次调用，结果会增加保存的新值</li><li>PUT 修改，多次调用，总结果数一致</li><li>DELETE删除，多次删除同一个元素，结果一致</li><li>因此，POST 没有幂等性</li></ul></li></ul></li></ul><h3 id="Restful请求方式映射：GET"><a href="#Restful请求方式映射：GET" class="headerlink" title="Restful请求方式映射：GET"></a>Restful请求方式映射：GET</h3><ul><li><p>概述</p><ul><li>使用 get 请求风格</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@GetMapping</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// @PathVariable 是将映射的值传给自定义的变量</span></span><br><span class="line">   <span class="meta">@GetMapping(value = &quot;/&#123;movieId&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;movieId&quot;)</span> String id)</span> &#123;</span><br><span class="line">       log.debug(<span class="string">&quot;movieId=&quot;</span> + id);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@GetMapping(&quot;/&#123;movieName&#125;/&#123;moviePrice&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">findMovie</span><span class="params">(<span class="meta">@PathVariable(&quot;movieName&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;moviePrice&quot;)</span> String price)</span> &#123;</span><br><span class="line">       log.debug(<span class="string">&quot;movieName=&quot;</span> + name + <span class="string">&quot;,moviePrice=&quot;</span> + price);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Restful GET请求查询<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/movie/&#125;&quot;</span>&gt;</span>查询所有电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/movie/m01&#125;&quot;</span>&gt;</span>查询编号为 m01 电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/movie/legend/40&#125;&quot;</span>&gt;</span>查询名称带传奇且价格大于40的电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Restful请求方式映射：POST"><a href="#Restful请求方式映射：POST" class="headerlink" title="Restful请求方式映射：POST"></a>Restful请求方式映射：POST</h3><ul><li><p>概述</p><ul><li>使用 POST 请求保存</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveMovie</span><span class="params">(Movie movie)</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;movie&quot;</span> + movie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Restful POST请求查询<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/movie/&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    电影Id：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;movieId&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电影名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电影价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;moviePrice&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Restful请求方式映射：PUT"><a href="#Restful请求方式映射：PUT" class="headerlink" title="Restful请求方式映射：PUT"></a>Restful请求方式映射：PUT</h3><ul><li><p>概述</p><ul><li>使用 PUT 请求修改数据</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateMovie</span><span class="params">(Movie movie)</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;movie&quot;</span> + movie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Restful PUT请求查询<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/movie/&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 post 请求转换成 put请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    电影Id：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;movieId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;m02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电影名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大鱼海棠&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电影价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;moviePrice&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加过滤器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">先解决乱码问题，再解决put，delete请求</span></span><br><span class="line"><span class="comment">fitter包下面的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>底层原理</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221014221501603.png" alt="image-20221014221501603"></p></li></ul><h3 id="Restful请求方式映射：DELETE"><a href="#Restful请求方式映射：DELETE" class="headerlink" title="Restful请求方式映射：DELETE"></a>Restful请求方式映射：DELETE</h3><ul><li><p>概述</p><ul><li>使用 DELETE 请求修改数据</li></ul></li><li><p>代码实现</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Restful DELETE请求：删除<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/movie/m01&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteMovie&quot;</span>&gt;</span>删除指定编号m01的电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/movie/m02&#125;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;confirmDeleteMovie&quot;</span>&gt;</span>删除指定编号m02的电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteMovie</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.获取通用表单</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> formElem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//2.修改通用表单的action属性值为请求的地址</span></span></span><br><span class="line"><span class="language-javascript">                formElem.<span class="property">action</span> =  event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3.提交通用表单</span></span></span><br><span class="line"><span class="language-javascript">                formElem.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//4.禁用默认行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">confirmDeleteMovie</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;您确认要删除该电影吗？&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//1.获取通用表单</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> formElem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//2.修改通用表单的action属性值为请求的地址</span></span></span><br><span class="line"><span class="language-javascript">                    formElem.<span class="property">action</span> =  event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//3.提交通用表单</span></span></span><br><span class="line"><span class="language-javascript">                    formElem.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;movieId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteMovie</span><span class="params">(<span class="meta">@PathVariable(&quot;movieId&quot;)</span> String movieId,HttpServletRequest request)</span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;deleteMovie:method:&quot;</span>+request.getMethod());<span class="comment">//DELETE</span></span><br><span class="line">    log.debug(<span class="string">&quot;deleteMovie:movie=&quot;</span>+movieId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC（一）</title>
      <link href="//post/dfa118ee8dc1/"/>
      <url>//post/dfa118ee8dc1/</url>
      
        <content type="html"><![CDATA[<h3 id="理解MVC架构和三层架构"><a href="#理解MVC架构和三层架构" class="headerlink" title="理解MVC架构和三层架构"></a>理解MVC架构和三层架构</h3><ul><li><p>MyBatis 是一个持久层框架</p></li><li><p>SpringMVC 是一个 MVC 框架</p></li><li><p>图解：</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012183217584.png" alt="image-20221012183217584"></p></li></ul><h3 id="MVC架构的缺点及其解决方案"><a href="#MVC架构的缺点及其解决方案" class="headerlink" title="MVC架构的缺点及其解决方案"></a>MVC架构的缺点及其解决方案</h3><ul><li><p>缺点：</p><ul><li>Servlet 数量太多不易控制</li><li>在Servlet中获取请求数据较麻烦： 需要大量的request.getParameter(“name”)</li><li>手动的类型转换：比如int age = Integer.parseInt(request.getParameter(“age”))</li><li>响应的方式的代码其实只想声明对应的响应数据。比如：request.getRequestDispatcher(path).forward(request,response); 中最关键的还是path</li></ul></li><li><p>解决方法：</p><ul><li>使用 SpringMVC 框架</li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012183442457.png" alt="image-20221012183442457"></p></li><li><p>将控制方法单独声明到控制类中(Controller类)</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012184232025.png" alt="image-20221012184232025"></p></li></ul><h3 id="认识SpringMVC"><a href="#认识SpringMVC" class="headerlink" title="认识SpringMVC"></a>认识SpringMVC</h3><ul><li>概述<ul><li>Spring 家族原生产品，与  <strong>IOC 容器等基础设施无缝对接</strong></li><li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li><li>代码清新简洁，大幅度 <strong>提升开发效率</strong></li><li>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li><li>支持 <strong>RESTful</strong> 编程风格的请求。</li><li>轻量级的框架，简单易学，进行更简洁的Web层开发</li><li><strong>可适配、非侵入</strong>：可以根据不同的应用场景，选择合适的控制器子类(simple型、command型、from型、wizard型、multi-action型或者自定义)，而不是一个单一控制器(比如Action/ActionForm)</li><li>非常容易与其他视图技术集成，如:Velocity、FreeMarker等等</li><li>因为模型数据不存放在特定的API里，而是放在一个Model里(Map数据结构实现，因此很容易被其他框架使用)</li><li>非常灵活的数据验证、格式化和数据绑定机制、能使用任何对象进行数据绑定，不必实现特定框架的API</li><li>更加简单、强大的异常处理</li><li>对静态资源的支持</li></ul></li></ul><h3 id="创建-web-项目"><a href="#创建-web-项目" class="headerlink" title="创建 web 项目"></a>创建 web 项目</h3><ul><li><p>开发步骤</p><ul><li><p>添加 web 模块</p></li><li><p>在 pom.xml  修改打包方式为 war</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012191832026.png" alt="image-20221012191832026"></p></li><li><p>或者使用 JBLJavaToWeb 插件</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012191850637.png" alt="image-20221012191850637"></p></li><li><p>部署并访问</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012191930319.png" alt="image-20221012191930319"></p></li><li><p>Html网页：可以访问</p></li><li><p>图片：也可以访问</p></li><li><p>Thymeleaf 网页：不可以直接访问，必须经过Thymeleaf解析器解析后再跳转到页面，所以在项目中一般把 Thymeleaf 网页放到 WEB-INF/templates</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221012192309740.png" alt="image-20221012192309740"></p></li></ul></li></ul><h3 id="SpringMVC-基本实现"><a href="#SpringMVC-基本实现" class="headerlink" title="SpringMVC 基本实现"></a>SpringMVC 基本实现</h3><ul><li><p>开发步骤</p><ul><li><p>添加依赖 Servlet 包 SpringMVC 及其 Spring 包、Thymeleaf 和 Spring5 整合包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加 web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--这是SpringMVC的总控制器，是唯一的一个Servlet，请求先经过总控制器，再到分控 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--启动时加载，而不是访问时才加载 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 目前的*.action的含义时，不是所有的请求都讲过总控制器,而是以action后缀结尾的请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>配置 springmvc.xml </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置组件的扫描基准包    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--这是SpringMVC的标配，功能强大，一定要写上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置 Thymeleaf 视图解析器   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>开发视图层页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/login.action&#125;&quot;</span>&gt;</span>点击登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>登录成功<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/springmvc/hello/toPortal.action&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">~~~~</span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line">// 这就是分控制器/处理器 Handler，不需要继承某个类或实现某个接口</span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello/toPortal.action&quot;)</span><br><span class="line">    public String toPortal() &#123;</span><br><span class="line">        return &quot;portal&quot;; // 先进行试图解析，将逻辑试图转换为物理试图 portal =&gt; /WEB-INF/templates/portal .html 然后转发页面</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/hello/login.action&quot;)</span><br><span class="line">    public String login() &#123;</span><br><span class="line">        return &quot;result&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>添加日志依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加属性插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定包的日志级别--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.controller&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>给分控制器添加日志</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloController.class);</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello/toPortal.action&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toPortal</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;==== portal ===&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;portal&quot;</span>; <span class="comment">// 先进行试图解析，将逻辑试图转换为物理试图 portal =&gt; /WEB-INF/templates/portal .html 然后转发页面</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello/login.action&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;== login ===&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用更加简单SLF4J日志(lombok的日志注解)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">// 添加这个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private Logger logger = LoggerFactory.getLogger(HelloController.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/toPortal.action&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toPortal</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;==== portal ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;portal&quot;</span>; <span class="comment">// 先进行试图解析，将逻辑试图转换为物理试图 portal =&gt; /WEB-INF/templates/portal .html 然后转发页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/login.action&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;== login ===&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>总控制器的访问路径</p><ul><li>Web项目中的资源，可以分为：<ul><li>静态资源(html css js images)</li><li>JSP资源 (动态网页)</li><li>对分控制器的访问（login.action  toPortal.action）</li></ul></li><li>方式1：<ul><li>*.action 对静态资源和JSP资源的访问不经过总控制器，曾经最流行的方式。</li><li>缺点：不支持Restful风格</li></ul></li><li>方式2：<ul><li>/* 所有的请求都经过 但是JSP和静态资源不应该经过。不要这么写</li></ul></li><li>方式3：<ul><li>/ 只有这里可以这么写。对分控制器和静态资源的访问会经过，但是对JSP的访问不会经过。</li><li>优点是支持Restful风格</li></ul></li></ul></li><li><p>视图控制器</p><ul><li><p>如果一个分控制器的方法的作用只是页面的跳转，可以使用<strong>\<mvc:view-controller>来替代</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">path: 跳转的路径</span></span><br><span class="line"><span class="comment">view-name：跳转的返回值</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/hello/toPortal.action&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;portal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @GetMapping(&quot;/hello/toPortal.action&quot;)</span></span><br><span class="line"><span class="comment">//    public String toPortal() &#123;</span></span><br><span class="line"><span class="comment">//        log.debug(&quot;==== portal ===&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        return &quot;portal&quot;; // 先进行试图解析，将逻辑试图转换为物理试图 portal =&gt; /WEB-INF/templates/portal .html 然后转发页面</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;portal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line">让项目启动后直接跳到web-inf下的thymeleaf页面，注意：要删除webapp下的index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><ul><li>一名一值</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username,String password)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;username=&quot;</span> + username + <span class="string">&quot; ,&quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login2</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String uname, <span class="meta">@RequestParam(&quot;password&quot;)</span> String pwd)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;username=&quot;</span> + uname + <span class="string">&quot; ,password=&quot;</span> +  pwd);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register1</span><span class="params">(String username,Integer age,Double score)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;username=&quot;</span> + username + <span class="string">&quot; ,age=&quot;</span> +  age + <span class="string">&quot; ,score=&quot;</span> + score);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register2</span><span class="params">(String username,Integer age,<span class="meta">@RequestParam(required = false,defaultValue = &quot;12&quot;)</span> Double score)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;username=&quot;</span> + username + <span class="string">&quot; ,age=&quot;</span> +  age + <span class="string">&quot; ,score=&quot;</span> + score);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一名一值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/login(username=&#x27;atguigu&#x27;,password=&#x27;123456&#x27;)&#125;&quot;</span>&gt;</span>登录1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/springmvc/user/login2?username=atguigu&amp;password=&#x27;23456&quot;</span>&gt;</span>登录2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/register1(username=&#x27;atguigu&#x27;,age=23,score=78.5)&#125;&quot;</span>&gt;</span>注册1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/register2(username=&#x27;atguigu&#x27;,age=24)&#125;&quot;</span>&gt;</span>注册2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>一名多值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/getTeams&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    请选择你最喜欢的球队：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Brazil&quot;</span>/&gt;</span>巴西</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;German&quot;</span>/&gt;</span>德国</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;French&quot;</span>/&gt;</span>法国</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Holland&quot;</span>/&gt;</span>荷兰</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Italian&quot;</span>/&gt;</span>意大利</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>/&gt;</span>中国</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getTeams&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTeams</span><span class="params">(<span class="meta">@RequestParam(&quot;team&quot;)</span> List&lt;String&gt; teamList)</span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;teamList=&quot;</span>+teamList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> empSalary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>实体类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/saveEmp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    工资：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;empSalary&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveEmp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveEmp</span><span class="params">(Employee emp123)</span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;employee:&quot;</span>+emp123);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>乱码问题</p><ul><li>注意1：页面上直接写实体类的属性，比如empName，而不需要写emp123.empName</li><li>注意2：分控制器中使用实体类的参数直接接收，和变量名无关。底层调用相应属性的getter和setter方法</li><li>注意3：解决POST中文乱码问题：</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置过滤器解决POST请求中文乱码问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>实体类含级联属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Subject&gt; subjectList;</span><br><span class="line">    <span class="keyword">private</span> Subject[] subjectArray;</span><br><span class="line">    <span class="comment">//private Set&lt;Teacher&gt; teacherSet; //SpringMVC中Set数据接收非常繁琐，不建议使用</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Double&gt; scores;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>实体类的集合属性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/saveStu&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    学校编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;school.schoolId&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    学校名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;school.schoolName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    课程1编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subjectList[0].subjecteId&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    课程1名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subjectList[0].subjectName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    课程2编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subjectList[1].subjecteId&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    课程2名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subjectList[1].subjectName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    课程3名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subjectList[2].subjectName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    JavaSE分数：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;scores[&#x27;JavaSE&#x27;]&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    SSM分数：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;scores[&#x27;SSM&#x27;]&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    JavaEE分数<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;scores[&#x27;JavaEE&#x27;]&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveStu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveStu</span><span class="params">(Student stu)</span>&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;student:&quot;</span>+stu);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取请求头</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getRequestHeader&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRequestHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String browseType,</span></span><br><span class="line"><span class="params">                               <span class="meta">@RequestHeader(&quot;Referer&quot;)</span> String referer)</span>&#123;</span><br><span class="line">    <span class="comment">// request.getHeader(&quot;User-Agent&quot;);</span></span><br><span class="line">    log.debug(<span class="string">&quot;browseType:&quot;</span>+browseType);</span><br><span class="line">    log.debug(<span class="string">&quot;Referer:&quot;</span>+referer);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取指定 cookie</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getCookieInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCookieInfo</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;,defaultValue = &quot;null&quot;)</span> String sessionId, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//Cookie [] cookies = request.getCookies();</span></span><br><span class="line">    log.debug(<span class="string">&quot;sessionId:&quot;</span>+sessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="页面跳转控制"><a href="#页面跳转控制" class="headerlink" title="页面跳转控制"></a>页面跳转控制</h3><ul><li><p>概述</p><ul><li><p>如果要获取保存在request中数据，必须使用转发。</p></li><li><p>转发只能转发到同一个项目，最多也就是同一个服务器的其他项目（特殊设置）</p></li><li><p>重定向可以跳转到互联网的任意位置</p></li><li><p>转发可以跳转到项目的WEB-INF目录下</p></li><li><p>重定向不可以跳转都项目的WEB-INF目录下（重定向是客户端跳转）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getDispatcher1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDispatcher1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>; <span class="comment">//默认就是转发,自动的添加前缀和后缀 视图解析</span></span><br><span class="line">        <span class="comment">// return &quot;forward:/WEB-INF/templates/result.html&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getDispatcher2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDispatcher2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/outer.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getDispatcher3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDispatcher3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:http://www.atguigu.com&quot;</span>; <span class="comment">//不可以 转发只能在当前项目跳转，最多也就是当前服务器的其他项目，还需要特别的设置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getRedirect1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRedirect1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/WEB-INF/templates/result.html&quot;</span>; <span class="comment">//不可以  WEB-INF下内容不可以从客户端直接访问，而重定向就是客户端访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getRedirect2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRedirect2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/outer.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getRedirect3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRedirect3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:http://www.atguigu.com&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="获取原生Servlet-API对象"><a href="#获取原生Servlet-API对象" class="headerlink" title="获取原生Servlet API对象"></a>获取原生Servlet API对象</h3><ul><li><p>概述</p><ul><li><p>如果在Web组件之间传递数据，在session域、application域中传递数据，请使用原生API。</p></li><li><p>如果在request域中传递数据，一般不使用原生API，而是使用下面的四种方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServletContext context;<span class="comment">//application</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getServletAPI&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">getServletAPI</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//ServletContext context = session.getServletContext();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        response.addHeader(<span class="string">&quot;school&quot;</span>,<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;lisi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        context.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="属性域"><a href="#属性域" class="headerlink" title="属性域"></a>属性域</h3><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用 Model 类型的形参</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名不能为空(model)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用 Map 类型的形参</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMap</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名不能为空(map)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>使用 ModelMap 类型的形参</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名不能为空(modelMap)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>使用 ModelAndView 对象</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">getModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名不能为空(ModelAndView&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原理</p><ul><li>使用Model、Map、ModelMap来传递数据，方法的返回值是String类，最终SpringMVC的底层都会变为使用ModelAndView来存储数据和视图</li><li>不是使用Model、Map、ModelMap、ModelAndView，底层都是在请求域传递数据，底层都调用了request.setAttribute(key,value)</li><li>使用Model、Map、ModelMap来传递数据，底层实现类都是BindingAwareModelMap</li></ul></li></ul><h3 id="表单数据回显"><a href="#表单数据回显" class="headerlink" title="表单数据回显"></a>表单数据回显</h3><ul><li><p>回显简单标签</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/tiger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TigerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getTiger1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTiger</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询数据库中获取指定编号的 Tiger 信息</span></span><br><span class="line">        <span class="type">Tiger</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>();</span><br><span class="line">        tiger.setTigerId(<span class="number">1</span>);</span><br><span class="line">        tiger.setTigerName(<span class="string">&quot;tomcat老虎&quot;</span>);</span><br><span class="line">        tiger.setTigerSalary(<span class="number">123.4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 tiger 的信息存入 Model 中</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;tiger1&quot;</span>,tiger);</span><br><span class="line">        <span class="comment">//转发到指定的页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tiger1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>回显简单数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tigerId&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.tigerId&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tigerName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.tigerName&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    工资：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tigerSalary&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.tigerSalary&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>回显单选框和下拉框</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getTiger2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTiger2</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    <span class="comment">//查询数据库中获取指定编号的Tiger信息</span></span><br><span class="line">    <span class="type">Tiger</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>();</span><br><span class="line">    tiger.setTigerId(<span class="number">1</span>);</span><br><span class="line">    tiger.setTigerName(<span class="string">&quot;tomcat老虎猫&quot;</span>);</span><br><span class="line">    tiger.setTigerSalary(<span class="number">123.45</span>);</span><br><span class="line">    tiger.setSeason(<span class="keyword">new</span> <span class="title class_">Season</span>(<span class="number">2</span>,<span class="string">&quot;Summer&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询数据库中获取所有的的Season信息</span></span><br><span class="line">    List&lt;Season&gt; seasonList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    seasonList.add(<span class="keyword">new</span> <span class="title class_">Season</span>(<span class="number">1</span>,<span class="string">&quot;Spring&quot;</span>));</span><br><span class="line">    seasonList.add(<span class="keyword">new</span> <span class="title class_">Season</span>(<span class="number">2</span>,<span class="string">&quot;Summer&quot;</span>));</span><br><span class="line">    seasonList.add(<span class="keyword">new</span> <span class="title class_">Season</span>(<span class="number">3</span>,<span class="string">&quot;Authumn&quot;</span>));</span><br><span class="line">    seasonList.add(<span class="keyword">new</span> <span class="title class_">Season</span>(<span class="number">4</span>,<span class="string">&quot;Winter&quot;</span>));</span><br><span class="line">    <span class="comment">//将Tiger、Season的信息存入Model</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;tiger1&quot;</span>,tiger);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;seasonList&quot;</span>,seasonList);</span><br><span class="line">    <span class="comment">//转发到指定的页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;tiger2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>回显简单数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tigerId&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.tigerId&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tigerName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.tigerName&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    工资：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tigerSalary&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.tigerSalary&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    季节Id：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.season.seasonId&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    季节Name：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;tiger1.season.seasonName&#125;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    季节：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;season.seasonId&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:each</span>=<span class="string">&quot;season:$&#123;seasonList&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:value</span>=<span class="string">&quot;$&#123;season.seasonId&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:text</span>=<span class="string">&quot;$&#123;season.seasonName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;tiger1.season.seasonId == season.seasonId&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    季节:<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>  <span class="attr">th:each</span>=<span class="string">&quot;season:$&#123;seasonList&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">th:value</span>=<span class="string">&quot;$&#123;season.seasonId&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">th:text</span>=<span class="string">&quot;$&#123;season.seasonName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;tiger1.season.seasonId == season.seasonId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="案例：影院系统"><a href="#案例：影院系统" class="headerlink" title="案例：影院系统"></a>案例：影院系统</h3><ul><li><p>开发步骤</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- lombok--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- junit5   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- spring-test    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-mvc 总控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 解决 POST 请求乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- springmvc的标配--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- 静态资源访问   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 视图控制器    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;portal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- 组件扫描  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- Thymeleaf 视图解析 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                       <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                       <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>logback.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建实体类和接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String movieId;</span><br><span class="line">    <span class="keyword">private</span> String movieName;</span><br><span class="line">    <span class="keyword">private</span> Double moviePrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MovieService</span> &#123;    </span><br><span class="line">    List&lt;Movie&gt; <span class="title function_">getAll</span><span class="params">()</span>;    </span><br><span class="line">    Movie <span class="title function_">getMovieById</span><span class="params">(String movieId)</span>;    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveMovie</span><span class="params">(Movie movie)</span>;    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateMovie</span><span class="params">(Movie movie)</span>;    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeMovieById</span><span class="params">(String movieId)</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用静态数据进行模拟</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String , Movie&gt; movieMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    movieMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String movieId = null;</span></span><br><span class="line">    <span class="type">Movie</span> <span class="variable">movie</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m01&quot;</span>, <span class="string">&quot;肖申克救赎&quot;</span>, <span class="number">10.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m02&quot;</span>, <span class="string">&quot;泰坦尼克号&quot;</span>, <span class="number">20.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m03&quot;</span>, <span class="string">&quot;审死官&quot;</span>, <span class="number">30.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m05&quot;</span>, <span class="string">&quot;大话西游之大圣娶亲&quot;</span>, <span class="number">40.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m06&quot;</span>, <span class="string">&quot;大话西游之仙履奇缘&quot;</span>, <span class="number">50.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m07&quot;</span>, <span class="string">&quot;功夫&quot;</span>, <span class="number">60.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m08&quot;</span>, <span class="string">&quot;大内密探凌凌漆&quot;</span>, <span class="number">70.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m09&quot;</span>, <span class="string">&quot;食神&quot;</span>, <span class="number">80.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m10&quot;</span>, <span class="string">&quot;西游降魔篇&quot;</span>, <span class="number">90.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m11&quot;</span>, <span class="string">&quot;西游伏妖篇&quot;</span>, <span class="number">11.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m12&quot;</span>, <span class="string">&quot;三傻大闹宝莱坞&quot;</span>, <span class="number">12.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m13&quot;</span>, <span class="string">&quot;唐人街探案&quot;</span>, <span class="number">13.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m14&quot;</span>, <span class="string">&quot;一个人的武林&quot;</span>, <span class="number">14.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m15&quot;</span>, <span class="string">&quot;罗马假日&quot;</span>, <span class="number">15.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m16&quot;</span>, <span class="string">&quot;花季雨季&quot;</span>, <span class="number">16.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    movie = <span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">&quot;m17&quot;</span>, <span class="string">&quot;夏洛特烦恼&quot;</span>, <span class="number">17.0</span>);</span><br><span class="line">    movieMap.put(movie.getMovieId(), movie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/movie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieService movieService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用业务层获取电影列表</span></span><br><span class="line">        List&lt;Movie&gt; all = movieService.getAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(all);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储到 Model 中</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;all&quot;</span>,all);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 页面跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;movieList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据展示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.table1</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>, <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>电影列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;movie:$&#123;all&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.movieId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.movieName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.moviePrice&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                添加 删除</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>删除电影</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/movie/removeMovieById(movieId=$&#123;movie.movieId&#125;)&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/removeMovieById&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">removeMovieById</span><span class="params">(String movieId)</span>&#123;</span><br><span class="line">    <span class="comment">//删除指定编号的电影</span></span><br><span class="line">    <span class="built_in">this</span>.movieService.removeMovieById(movieId);</span><br><span class="line">    <span class="comment">//页面跳转</span></span><br><span class="line">    <span class="comment">//return &quot;movieList&quot;;//不能这么跳</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/movie/getAll&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：return时，如果要跳转到分控制器的方法，而不是页面，必须要添加forward或者redirect</li></ul></li></ul></li></ul><ul><li><p>添加电影</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveMovie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveMovie</span><span class="params">(Movie movie)</span> &#123;</span><br><span class="line">    movieService.saveMovie(movie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/movie/getAll&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/movie/saveMovie&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    电影Id：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;movieId&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电影名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    电影价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;moviePrice&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;movieAdd&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring（三）</title>
      <link href="//post/29af7777e511/"/>
      <url>//post/29af7777e511/</url>
      
        <content type="html"><![CDATA[<h3 id="AOP第一个示例：添加日志（实现）"><a href="#AOP第一个示例：添加日志（实现）" class="headerlink" title="AOP第一个示例：添加日志（实现）"></a>AOP第一个示例：添加日志（实现）</h3><ul><li><p>开发步骤</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义切面（通知 + 切入点）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 这个类要交给个IoC容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">//这是一个前置通知 干什么</span></span><br><span class="line">    <span class="comment">//在哪里干 切入点，这是一个表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.atguigu.aop.Calculator.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLog123</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 开始执行了，方法的参数是：yyyy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中启动 AOP</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置组件扫描 @Component @Controller @Service @Resposity--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--启用切面的注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value = &quot;classpath:spring.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAOP</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.calculator.add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDiv</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.calculator.div(<span class="number">100</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启 AOP 后，使用了代理实现</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009143249060.png" alt="image-20221009143249060"></p></li><li><p>更加直观的理解：</p><ul><li>切面： <strong>public class</strong> LogAspect</li><li>连接点：add()  sub() div() mul() mod()</li><li>通知：beforeLog123 afterReturningLog</li><li>切入点：<strong>execution(* com.atguigu.aop.Calculator.*(int,int))</strong></li></ul></li></ul><h3 id="优化切入"><a href="#优化切入" class="headerlink" title="优化切入"></a>优化切入</h3><ul><li><p>对所写代码进行优化</p><ul><li><p>优化一（将切入点统一为一个 <strong>方法</strong>）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 这个类要交给个IoC容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化,将所有 execution 提取出来</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.Calculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个前置通知 干什么</span></span><br><span class="line">    <span class="comment">//在哪里干 切入点，这是一个表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;com.atguigu.pointcut.MyPointcut.pointcut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLog123</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 开始执行了，方法的参数是：yyyy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @After 成功失败都执行的类</span></span><br><span class="line">    <span class="comment">// @AfterReturning 成功执行的类</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointCut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 执行结束，方法的参数是：yyyy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// execution(* com.atguigu.aop.Calculator.*(..) 中的 .. 表示参数任意，有无都可</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointCut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 执行异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 不管成功还是失败，都执行此方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优化二（将切入点统一为一个 <strong>类</strong> ）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPointcut</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.Calculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此时使用这个切入点的方法需要使用全类名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Before(&quot;com.atguigu.pointcut.MyPointcut.pointcut1()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLog123</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 开始执行了，方法的参数是：yyyy&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="AOP-注解方式：在通知中获取连接点细节信息"><a href="#AOP-注解方式：在通知中获取连接点细节信息" class="headerlink" title="AOP 注解方式：在通知中获取连接点细节信息"></a>AOP 注解方式：在通知中获取连接点细节信息</h3><ul><li><p>获取详细信息，注意 JoinPoint 是在 org.aspectj.lang.JoinPoint 下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 这个类要交给个IoC容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化,将所有 execution 提取出来</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.Calculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个前置通知 干什么</span></span><br><span class="line">    <span class="comment">//在哪里干 切入点，这是一个表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLog123</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得详细的细节</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得全类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得访问修饰符，得到的数字，需要 Modifier，进行转换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> signature.getModifiers();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 &quot;</span> + name + <span class="string">&quot; 开始执行了，方法的参数是：&quot;</span> + Arrays.toString(args));</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 &quot;</span>+ name +<span class="string">&quot; 开始执行了，方法的参数是：&quot;</span> +declaringTypeName + <span class="string">&quot; #&quot;</span> + Modifier.toString(modifiers));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @After 成功失败都执行的类</span></span><br><span class="line">    <span class="comment">// @AfterReturning 成功执行的类</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut1()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 &quot;</span>+ name +<span class="string">&quot; 执行结束，方法的结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// execution(* com.atguigu.aop.Calculator.*(..) 中的 .. 表示参数任意，有无都可</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut1()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowing</span><span class="params">(JoinPoint joinPoint,Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 &quot;</span> + name + <span class="string">&quot; 执行异常,异常信息为：&quot;</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志]：方法 xxx 不管成功还是失败，都执行此方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="AOP-注解方式：切入点的详细语法"><a href="#AOP-注解方式：切入点的详细语法" class="headerlink" title="AOP 注解方式：切入点的详细语法"></a>AOP 注解方式：切入点的详细语法</h3><ul><li><p>切入点是某包某类的无参数的方法:</p><ul><li>示例：execution(* com.atguigu.service.impl.Student.test())</li></ul></li></ul><ul><li><p>切入点是某包某类带有参数的方法</p><ul><li>示例： execution(* com.atguigu.service.impl.Student.test(String,int))</li></ul></li></ul><ul><li><p>切入点是某包某类的某个同名的所有方法</p><ul><li>示例：.. 表示任意个数任意类型的参数execution(* com.atguigu.service.impl.Student.test(..))</li></ul></li></ul><ul><li><p>切入点是某包下的某类的所有方法</p><ul><li>示例：<em>表示任意的类名，方法名，包名execution( </em>  com.atguigu.service.impl.Student.*(..))</li></ul></li></ul><ul><li><p>切入点是某包下的所有类的所有方法</p><ul><li>示例：<em> 表示任意的类名，方法名，包名execution(</em> com.atguigu.service.impl.<em> . </em>(..))</li></ul></li></ul><ul><li>对于execution()表达式整体可以使用三个逻辑运算符号<ul><li>execution() || execution()表示满足两个execution()中的任何一个即可</li><li>execution() &amp;&amp; execution()表示两个execution()表达式必须都满足</li><li>!execution()表示不满足表达式的其他方法</li></ul></li></ul><h3 id="AOP-注解方式：环绕通知"><a href="#AOP-注解方式：环绕通知" class="headerlink" title="AOP 注解方式：环绕通知"></a>AOP 注解方式：环绕通知</h3><ul><li><p>概述</p><ul><li>环绕通知在目标方法执行前后执行，比如事务切面，可以使用环绕通知</li><li>@Around在环绕通知中，要执行目标方法，使用 JointPoint 不可以，要使用 <strong>ProceedingJoinPoint</strong></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.atguigu.aop.Calculator.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doTransaction</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            System.out.println(<span class="string">&quot;【事务】：开启事务&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用目标方法</span></span><br><span class="line">            result = pjp.proceed();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭事务</span></span><br><span class="line">            System.out.println(<span class="string">&quot;【事务】：关闭事务&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            System.out.println(<span class="string">&quot;【事务】：回滚事务&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 根据情况，如果需要，不管成功还是失败都执行的操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;【事务】：不管成功还是失败都执行的操作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>成功执行顺序</p><ul><li>@Before</li><li>@Around</li><li>@AfterReturning</li><li>@After</li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009161239510.png" alt="image-20221009161239510"></p></li><li><p>失败的执行顺序</p><ul><li>@Before</li><li>@Around</li><li>@AfterThrowing</li><li>@After</li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009161807790.png" alt="image-20221009161807790"></p></li></ul></li></ul><h3 id="AOP注解方式：优先级Order"><a href="#AOP注解方式：优先级Order" class="headerlink" title="AOP注解方式：优先级Order"></a>AOP注解方式：优先级Order</h3><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Order &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">2147483647</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 这个类要交给个IoC容器管理</span></span><br><span class="line"><span class="meta">@Order(-2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//交给IoC容器</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionAspect</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>order 的 value 值越小，越早执行。可以是负数</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009163351773.png" alt="image-20221009163351773"></p></li></ul><h3 id="AOP-注解方式：没有接口的情况"><a href="#AOP-注解方式：没有接口的情况" class="headerlink" title="AOP 注解方式：没有接口的情况"></a>AOP 注解方式：没有接口的情况</h3><ul><li><p>情况1：没有切面，注入是实现类本身，不是动态代理类</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009163957002.png" alt="image-20221009163957002"></p></li></ul><ul><li><p>情况2：使用切面，但是有接口（底层自动使用 JDK 的动态代理）</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009164049466.png" alt="image-20221009164049466"></p></li></ul><ul><li><p>情况3：使用切面，但是没有接口，底层自动使用CGLIB</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009164807267.png" alt="image-20221009164807267"></p></li></ul><ul><li><p>情况4：使用切面，不管是否有接口，都使用CGLIB</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy proxy-target-class=<span class="string">&quot;true&quot;</span>&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    proxy-target-class=</span><br><span class="line">     <span class="literal">false</span>: 默认值  有接口，使用JDK动态代理 没有接口，底层使用CGLIB</span><br><span class="line">     <span class="literal">true</span>:  不管是否有接口，底层都使用CGLIB</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221009164551732.png" alt="image-20221009164551732"></p></li></ul><ul><li><p>使用场景</p><ul><li><p>JDK 动态代理：前提，必须有接口 JDK 官方技术</p></li><li><p>CGLIB 动态代理：有没有接口都可以 第三方技术</p></li></ul></li></ul><ul><li><p>为什么 JDK 动态代理必须有接口？</p><ul><li><p>因为 JDK 动态代理生成的代理类已继承了Proxy，而Java是单继承的，所以必须有接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.service.CalculatorPureImpl;</span><br><span class="line"><span class="keyword">import</span> sun.misc.ProxyGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Util</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeProxyClassToHardDisk</span><span class="params">(String path,Class[]  clazz)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class="string">&quot;$Proxy22&quot;</span>, clazz);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);  </span><br><span class="line">            out.write(classFile);  </span><br><span class="line">            out.flush();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                out.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Util.writeProxyClassToHardDisk(<span class="string">&quot;d:/$Proxy22.class&quot;</span>, CalculatorPureImpl.class.getInterfaces());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>为什么CGLIB实现动态代理不要求有接口？</p><ul><li><p>因为CGLIB生成的代理类没有固定的父类，所以可以直接继承目标类，不需要接口。</p></li><li><p>注意：此时必须修改为CGLIB方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;cglib&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">加入到测试类中</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="事务的四大特征"><a href="#事务的四大特征" class="headerlink" title="事务的四大特征"></a>事务的四大特征</h3><ul><li>四大特征<ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul></li><li>Spring 事务中的四大属性<ul><li>传播性</li><li>隔离级别</li><li>超时时间</li><li>只读事务（异常回滚类型）</li></ul></li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul><li><p>数据库访问的并发问题</p><ul><li>脏读 :一个事务读到了另一个事务的未提交的数据</li><li>不可重复读 :一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致.</li><li>幻读 :一个事务读到了另一个事务已经提交的 insert或者delete 的数据导致多次查询结果不一致.</li></ul></li><li><p>通过设置不同的隔离级别解决数据库访问的并发问题</p><p>| <em>隔离级别</em>       | <em>脏读</em> | <em>不可重复读</em> | <em>幻读</em> |<br>| ———————— | ——— | —————— | ——— |<br>| READ_UNCOMMITTED | √      | √            | √      |<br>| READ_COMMITTED   | ×      | √            | √      |<br>| REPEATABLE_READ  | ×      | ×            | √      |<br>| SERIALIZABLE     | ×      | ×            | ×      |</p></li><li><p>如果选择DEFAULT，默认值，由底层数据库自动判断应该使用什么隔离级别</p></li><li><p>mysql中使用了MVCC多版本控制技术，在REPEATABLE READ这个级别也可以避免幻读</p></li><li>事务的隔离级别要得到底层数据库引擎的支持, 而不是应用程序或者框架的支持。<ul><li>Oracle 支持的 2 种事务隔离级别：READ_COMMITED（默认） , SERIALIZABLE。</li><li>MySQL 支持 4种事务隔离级别，默认REPEATABLE READ</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring （二）</title>
      <link href="//post/57919a84f836/"/>
      <url>//post/57919a84f836/</url>
      
        <content type="html"><![CDATA[<h3 id="Component-和-Value-注解"><a href="#Component-和-Value-注解" class="headerlink" title="@Component 和 @Value 注解"></a>@Component 和 @Value 注解</h3><ul><li><p>标记与扫描</p><ul><li>在要实例化的 bean 上加上 @Component 注解</li><li>在 xml 文件中扫描添加的注解的包，base-package</li><li>使用 @value 给基本类型的参数和String类型参数赋值<ul><li>位置可以在setter方法或者成员变量上</li><li>如果在setter方法上，就会使用反射调用setter方法。</li><li>如果在成员变量上，就是使用反射直接操作Field成员变量。</li><li>不能写在构造方法上</li></ul></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    表示 bean，相当于 xml 中的&lt;bean class=&quot;xxx&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">        此时 id 为类名首字母小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyMachine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;aaa&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>xml 文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        指定扫描的路径，base-package: 会扫描基准包以及子包下面的注解，比如 @Component</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.bean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@ Autowired 注解"></a>@ Autowired 注解</h3><ul><li><p>引用数据类型进行注解</p><ul><li>使用@Autowired标记引用类型的成员变量，实现自动装配。</li><li>@Autowired可以写在成员变量、setter方法、构造方法上，均是通过反射来实现注入</li><li>建议写在成员变量上</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;component1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String happyComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HappyMachine happyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;happyComponent &quot;</span> + happyComponent + <span class="string">&quot; &quot;</span> + happyMachine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Repository，-Controller-和-Service"><a href="#Repository，-Controller-和-Service" class="headerlink" title="@Repository，@Controller 和 @Service"></a>@Repository，@Controller 和 @Service</h3><ul><li>概述<ul><li>@Component 通用性的注解，实际开发中可以替代@Controller @Service @Repository，但是用在非控制层、业务层、DAO层的位置</li><li>@Controller 用在控制层</li><li>@Service  用在业务层</li><li>@Repository 用在DAO层</li><li>注解都写在实现类上，不能写在接口上。Bean的默认名称是类型首字母小写。</li><li>这四个注解本质是相同的</li></ul></li></ul><h3 id="Autowire-的过程"><a href="#Autowire-的过程" class="headerlink" title="@Autowire 的过程"></a>@Autowire 的过程</h3><ul><li>首先 ByType 进行自动装配<ul><li>此时若存在多个 Bean，则会报错</li></ul></li><li>若存在多个同类型的 Bean，就会尝试ByName<ul><li>若有匹配的 name，则会成功</li></ul></li><li>如果没有匹配的name，就会尝试@Qualifier，匹配bean的name</li><li>如果@Qualifier也不匹配，报异常</li></ul><h3 id="Qualifier-注解"><a href="#Qualifier-注解" class="headerlink" title="@Qualifier 注解"></a>@Qualifier 注解</h3><ul><li><p>当存在多个 Bean 时，且 ByName 也未匹配成功</p></li><li><p>此时就可以使用 @Qualifier，类似一个别名吧</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221008105202162.png" alt="image-20221008105202162"></p></li></ul><h3 id="全注解配置"><a href="#全注解配置" class="headerlink" title="全注解配置"></a>全注解配置</h3><ul><li><p>概述</p><ul><li>给将来学习SpringBoot打基础</li><li>SpringBoot中没有了XML，但是会引入yml或者properties，推荐yml</li></ul></li><li><p>代码实现</p><ul><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        之前 xml 里面的 bean 都是通过反射进行赋值的，或者说是实例化的</span></span><br><span class="line"><span class="comment">            现在不使用 xml，因此在需要实例化的方法或者成员变量上加上 @Bean</span></span><br><span class="line"><span class="comment">            让 IoC 容器将此方法或者成员变量加入实例化后放到到 IoC 容器中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">druidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        source.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        source.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db&quot;</span>);</span><br><span class="line">        source.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        source.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看 IoC 容器里面的 Bean</span></span><br><span class="line"><span class="comment">//        for (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;druidDataSource&quot;</span>, DruidDataSource.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">DruidPooledConnection</span> <span class="variable">connection</span> <span class="operator">=</span> bean.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Spring-整合-Junit4"><a href="#Spring-整合-Junit4" class="headerlink" title="Spring 整合 Junit4"></a>Spring 整合 Junit4</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:spring.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestIoC3</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserController userController;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testController</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userController.save();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="built_in">this</span>.dataSource123.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h3><ul><li>概述<ul><li>当我们要给不同模块添加相同功能时，代码会存在冗余，不利于修改</li></ul></li><li>解决<ul><li>将相同功能写为一份模板，在访问目标资源之前之后动态的执行代码</li></ul></li></ul><h3 id="代理引出"><a href="#代理引出" class="headerlink" title="代理引出"></a>代理引出</h3><ul><li><p>概述</p><ul><li>方便业务的开发</li></ul></li><li><p>代码</p><ul><li><p>第一版（只计算）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用途：</span></span><br><span class="line"><span class="comment"> *      只负责计算的业务，不考虑其他功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> j - i;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>第二版（添加日志）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> *      1.开发者不仅要考虑业务，还有其他非业务功能（日志等）</span></span><br><span class="line"><span class="comment"> *      2.相同代码多次出现不同多个位置，不利于修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 开始，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 结束，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 开始，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> j - i;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 结束，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 开始，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 结束，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 开始，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 结束，参数是 &quot;</span> + i + <span class="string">&quot; &quot;</span> + j );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第三版（添加日志并改进）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> *      1.开发者不仅要考虑业务，还有其他非业务功能（日志等）</span></span><br><span class="line"><span class="comment"> *      2.相同代码多次出现不同多个位置，不利于修改</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> *      1.缺点一的问题还是存在</span></span><br><span class="line"><span class="comment"> *      2.缺点二的问题存在缓解</span></span><br><span class="line"><span class="comment"> *      3.当需要添加或者去除日志功能，则还需要修改源代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最优：</span></span><br><span class="line"><span class="comment"> *      如果开发业务时只考虑功能，再定义日志功能类，在运行时，让日志功能切入到业务中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImplSolve</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        logAfter();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> j - i;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        logAfter();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        logAfter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        logAfter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] xxx 开始，参数是 a, b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] xxx 结束，参数是 a, b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>概述</p><ul><li>代理（经纪人）：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标（大明星）：被代理“套用”了非核心逻辑代码的类、对象、方法。</li><li>二十三种设计模式中的一种，属于结构型模式。<ul><li>分为静态代理模式和动态代理模式。</li><li>针对使用广泛的是动态代理模式。</li><li>静态代理模式有明显的缺点，作为动态代理的引入</li></ul></li></ul></li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li><p>概述</p><ul><li>开闭原则，即实现接口，然后添加相应的方法</li></ul></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculator：大明星和经纪人必须有同一个接口</span></span><br><span class="line"><span class="comment"> * CalculatorPureImpl：大明星只管拍广告</span></span><br><span class="line"><span class="comment"> * CalculatorStaticProxy：经纪人完成 谈判 签约 收钱等功能，也包括让大明星去拍广告</span></span><br><span class="line"><span class="comment"> * 优点：</span></span><br><span class="line"><span class="comment"> *  方案1：CalculatorLogImpl：一个大明星既要拍广告还要负责谈判、签约、授权等业务功能，没有引入经纪人</span></span><br><span class="line"><span class="comment"> *       CalculatorPureImpl已经不需要了</span></span><br><span class="line"><span class="comment"> *  方案2：CalculatorPureImpl 大明星+CalculatorStaticProxy  经纪人</span></span><br><span class="line"><span class="comment"> *     实现了在不修改业务类情况下，却给业务类增加了功能</span></span><br><span class="line"><span class="comment"> *     符合开闭原则（不要通过修改代码去增加功能，而是通过增加代码来修改功）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      *</span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> * public class CalculatorStaticProxy implements Calculator &#123; *</span></span><br><span class="line"><span class="comment"> *     private Calculator calculator;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 只能代理Calculator的实现类。</span></span><br><span class="line"><span class="comment"> * 对于每一个接口，都需要提供专门的一个静态代理类；会产生很多的静态代理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 希望：</span></span><br><span class="line"><span class="comment"> * 不管有多少个接口，如果要实现日志功能，只有一个代理类即可。</span></span><br><span class="line"><span class="comment"> * 动态代理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator calculator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Calculator <span class="title function_">getCalculator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCalculator</span><span class="params">(Calculator calculator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 签约</span></span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理然让大明星拍广告，因为都实现了这个接口，因此哪个实例化，此时就是哪个类进行调用的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.calculator.add(i, j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打钱</span></span><br><span class="line">        logAfter();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 签约</span></span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理然让大明星拍广告，因为都实现了这个接口，因此哪个实例化，此时就是哪个类进行调用的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.calculator.sub(i, j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打钱</span></span><br><span class="line">        logAfter();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 签约</span></span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理然让大明星拍广告，因为都实现了这个接口，因此哪个实例化，此时就是哪个类进行调用的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.calculator.mul(i, j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打钱</span></span><br><span class="line">        logAfter();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 签约</span></span><br><span class="line">        logBefore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理然让大明星拍广告，因为都实现了这个接口，因此哪个实例化，此时就是哪个类进行调用的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.calculator.div(i, j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打钱</span></span><br><span class="line">        logAfter();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] xxx 开始，参数是 a, b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] xxx 结束，参数是 a, b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>缺点：</p><ul><li><p>可以代理所有实现了指定接口的实现类</p></li><li><p>但是无法代理 <strong>其他接口的实现类</strong></p></li><li>需要给每个接口都单独的定义一个静态代理类，哪怕都是记录日志</li></ul></li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul><li><p>两种实现方式</p><ul><li>JDK动态代理，前提必须有接口 Calculator UserDao</li><li>第三方的CGLIB动态代理 是否有接口都可以。功能更强大</li></ul></li><li><p>代码实现</p><ul><li><p>定义一个产生动态代理的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogDynamicProxyFactory</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T target; <span class="comment">// 目标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(T target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogDynamicProxyFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogDynamicProxyFactory</span><span class="params">(T target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 目标类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要处理的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要处理的事情</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (Object proxy, Method method, Object[] args) -&gt; &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用目标方法之前要完成的功能</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[日志] 方法&quot;</span> + method.getName() + <span class="string">&quot;开始执行，参数&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通过反射调用相应的方法(add,save)</span></span><br><span class="line">                result = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用目标方法之后要完成的功能</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[日志] 方法&quot;</span> + method.getName() + <span class="string">&quot;结束执行，结果是&quot;</span> + result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">&quot;[日志] 方法&quot;</span> + method.getName() + <span class="string">&quot;执行出现异常，异常信息&quot;</span> + e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[日志] 方法&quot;</span> + method.getName() + <span class="string">&quot;执行了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(loader, interfaces, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进行测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxy</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 给Calculator添加功能</span></span><br><span class="line">        LogDynamicProxyFactory&lt;Calculator&gt; factory1 = <span class="keyword">new</span> <span class="title class_">LogDynamicProxyFactory</span>&lt;Calculator&gt;();</span><br><span class="line">        factory1.setTarget(<span class="keyword">new</span> <span class="title class_">CalculatorPureImpl</span>());</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> factory1.getProxy();</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> proxy.add(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给 UserDao 添加功能</span></span><br><span class="line">        LogDynamicProxyFactory&lt;UserDao&gt; factory2 = <span class="keyword">new</span> <span class="title class_">LogDynamicProxyFactory</span>&lt;&gt;();</span><br><span class="line">        factory2.setTarget(<span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>());</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">proxy1</span> <span class="operator">=</span> factory2.getProxy();</span><br><span class="line">        proxy1.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring （一）</title>
      <link href="//post/ee13d996cafc/"/>
      <url>//post/ee13d996cafc/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>非侵入性</li><li>轻量级</li><li>控制翻转</li><li>AOP</li><li>组件化</li><li>声明式</li><li>一站式</li></ul><h3 id="Spring-五大模块"><a href="#Spring-五大模块" class="headerlink" title="Spring 五大模块"></a>Spring 五大模块</h3><ul><li><p>图解</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221005205344123.png" alt="image-20221005205344123"></p></li></ul><h3 id="IOC-容器"><a href="#IOC-容器" class="headerlink" title="IOC 容器"></a>IOC 容器</h3><ul><li>概述<ul><li>Spring认为一切类都是Bean，比如实体类、DAO类、业务层、控制类、通知类等，容纳这些Bean的是Spring提供的IoC容器</li><li>不需要用户创建对象，而是由 IOC 容器创建对象，用户之前从 IOC 容器获取创建好的对象</li><li>IOC 容器创建对象的依据是 xml 文件或注解</li><li>Servlet 容器能够管理 Servlet、Filter、Listener 这样的组件的一生</li></ul></li><li><p>BeanFactory </p><ul><li>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给 <strong>开发人员使用</strong></li></ul></li><li><p>ApplicationContext</p><ul><li>BeanFactory 的子接口，提供了更多高级特性。<strong>面向 Spring 的使用者</strong>，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory</li></ul></li></ul><h3 id="Spring-实例"><a href="#Spring-实例" class="headerlink" title="Spring 实例"></a>Spring 实例</h3><ul><li><p>非 IOC 实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponentImpl</span> <span class="keyword">implements</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponentImpl doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>IOC 实现</p><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>图解</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221005214106078.png" alt="image-20221005214106078"></p></li><li><p>创建配置文件并定义 Bean</p><ul><li>在 resource 下创建 xml 配置文件，名称随意，是IoC容器创建对象时需要遵守的指令</li></ul></li><li><p>代码实现</p><ul><li>不需要用户来创建对象</li><li>利于修改，直接修改 xml 即可</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Ioc</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 IOC 容器</span></span><br><span class="line">   <span class="comment">// BeanFactory context = new ClassPathXmlApplicationContext(&quot;classpath:spring.xml&quot;);</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:spring.xml&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 IOC 中获取 bean</span></span><br><span class="line">    <span class="comment">// HappyComponent happyComponent = (HappyComponent)context.getBean(&quot;happyComponent&quot;);</span></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;happyComponent&quot;</span>,HappyComponent.class);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 bean</span></span><br><span class="line">    happyComponent.doWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        appyComponent happyComponent = new HappyComponentImpl2();</span></span><br><span class="line"><span class="comment">        id :对象的名称  用户根据id来获取相应的对象</span></span><br><span class="line"><span class="comment">        id也可以修改为name，没有区别，建议使用id</span></span><br><span class="line"><span class="comment">            bean name=&quot;happyComponent&quot; class=&quot;com.atguigu.ioc.HappyComponentImpl2&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        class:类的完整路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        底层使用了反射来创建对象</span></span><br><span class="line"><span class="comment">        1.遍历xml，找到对应的id。如果不存在，报异常</span></span><br><span class="line"><span class="comment">        2.如果存在，获取找到了对应的class属性，并获取值</span></span><br><span class="line"><span class="comment">            String className = &quot;com.atguigu.ioc.HappyComponentImpl2&quot;</span></span><br><span class="line"><span class="comment">        3.根据字符串获取Class对象</span></span><br><span class="line"><span class="comment">            Class clazz = Class.forName(className);</span></span><br><span class="line"><span class="comment">        3.使用反射创建对象</span></span><br><span class="line"><span class="comment">            Object happyComponent = clazz.newInstance();</span></span><br><span class="line"><span class="comment">            Object happyComponent = clazz.getConstructor().newInstance();</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl.HappyComponentImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="给bean的属性赋值：setter注入-基本数据类型和String"><a href="#给bean的属性赋值：setter注入-基本数据类型和String" class="headerlink" title="给bean的属性赋值：setter注入(基本数据类型和String)"></a>给bean的属性赋值：setter注入(基本数据类型和String)</h3><ul><li><p>概述</p><ul><li>底层调用 set 方法</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 IoC 容器</span></span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:spring.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Bean 对象</span></span><br><span class="line">        <span class="type">HappyComponent</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;happyComponent2&quot;</span>, HappyComponent.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Bean</span></span><br><span class="line">        bean.doWork();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;happyComponent2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyComponentImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用property标签实现属性注入，底层通过反射调用setter方法</span></span><br><span class="line"><span class="comment">        componentName  set+C+omponentName</span></span><br><span class="line"><span class="comment">        method.invoke(&quot;setComponentName&quot;,&quot;java&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        name:属性名称</span></span><br><span class="line"><span class="comment">        value：属性值</span></span><br><span class="line"><span class="comment">         底层不是通过反射直接操作field，而是调用setter方法</span></span><br><span class="line"><span class="comment">          &lt;property name=&quot;componentName123&quot; value=&quot;ssm&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引用外部已声明的bean（引用数据类型）"><a href="#引用外部已声明的bean（引用数据类型）" class="headerlink" title="引用外部已声明的bean（引用数据类型）"></a>引用外部已声明的bean（引用数据类型）</h3><ul><li><p>概述</p><ul><li>当我们注入属性的时候，有可能需要注入的是一个引用数据类型</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      HappyMachine machine = new HappyMachine();</span></span><br><span class="line"><span class="comment">      machine.setMachineName(&quot;machine&quot;);</span></span><br><span class="line"><span class="comment">      相当于先 new 一个 HappyMachine 对象，然后用 set 赋值</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;machine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;machine&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      HappyComponent component = new HappyComponent();</span></span><br><span class="line"><span class="comment">      component.setComponentName(&quot;linux&quot;);</span></span><br><span class="line"><span class="comment">      component.setHappyMachine(machine);</span></span><br><span class="line"><span class="comment">ref：为上面设置 bean 的id</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl.HappyComponentImpl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;linux&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;happyMachine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;machine&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内部-Bean"><a href="#内部-Bean" class="headerlink" title="内部 Bean"></a>内部 Bean</h3><ul><li><p>概述</p><ul><li>内部的 Bean 只在 property 内生效</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;happyComponent4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyComponentImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;linux&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;happyMachine&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">内部Bean，作用方法，当前property标签</span></span><br><span class="line"><span class="comment">id 可以进行省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nameabc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="给bean的属性赋值：引入外部属性文件"><a href="#给bean的属性赋值：引入外部属性文件" class="headerlink" title="给bean的属性赋值：引入外部属性文件"></a>给bean的属性赋值：引入外部属性文件</h3><ul><li><p>开发步骤</p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源,德鲁伊，内带连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetterDruid</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">// 获取 IoC 容器</span></span><br><span class="line">    <span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取 Bean 对象</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;dataSource&quot;</span>, DruidDataSource.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 Bean</span></span><br><span class="line">    <span class="type">DruidPooledConnection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 引入外部文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;uname&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;pwd&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="级联属性赋值"><a href="#级联属性赋值" class="headerlink" title="级联属性赋值"></a>级联属性赋值</h3><ul><li><p>概述</p><ul><li>通过 get 和 set 方法来给属性赋值</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;machine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl.HappyMachine&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;name222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl.HappyComponentImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;happyMachine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;machine&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        首先得到 HappyMachine 对象</span></span><br><span class="line"><span class="comment">           happyComponent happyComponent =  new HappyComponent();</span></span><br><span class="line"><span class="comment">           happyComponent.getHappyMachine()</span></span><br><span class="line"><span class="comment">        然后调用该对象的 set 方法</span></span><br><span class="line"><span class="comment">             happyComponent.getHappyMachine().setMachineName</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;happyMachine.machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><ul><li><p>概述</p><ul><li>通过 set 注入，当属性过多时，比较麻烦，通过构造器进行一次性传参</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">底层通过反射，调用有参构造方法</span></span><br><span class="line"><span class="comment">注意和构造器里面的参数保持一致</span></span><br><span class="line"><span class="comment">若必须颠倒顺序，则使用索引保持一致</span></span><br><span class="line"><span class="comment">或使用name进行说明</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl.HappyComponentImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;machine&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊值处理"><a href="#特殊值处理" class="headerlink" title="特殊值处理"></a>特殊值处理</h3><ul><li><p>概述</p><ul><li>当赋值中存在 &lt;，&gt; 时，不处理则会报错</li></ul></li><li><p>处理方式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;propValue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc2.PropValue&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--给 null 值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;commonValue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    方法1：使用字符实体</span></span><br><span class="line"><span class="comment">    方法2：CDATA:Charactor Data 字符数据</span></span><br><span class="line"><span class="comment">    lt:less than</span></span><br><span class="line"><span class="comment">    gt:greater than</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a<span class="symbol">&amp;lt;</span>b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### 12、使用 p 名称空间</span><br><span class="line"></span><br><span class="line">- 概述</span><br><span class="line"></span><br><span class="line">  - 可以使用 p 名称空间直接注入属性值</span><br><span class="line"></span><br><span class="line">- 代码实现</span><br><span class="line"></span><br><span class="line">  ~~~xml</span><br><span class="line">  &lt;bean id=&quot;machine2&quot; class=&quot;com.atguigu.mapper.impl.HappyMachine&quot; p:machineName=&quot;aaa&quot;&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="集合属性（重要！！）"><a href="#集合属性（重要！！）" class="headerlink" title="集合属性（重要！！）"></a>集合属性（重要！！）</h3><ul><li><p>概述</p><ul><li>注入时存在集合属性</li></ul></li><li><p>代码实现</p><ul><li><p>Java 类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] scoreArr;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courseList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; friendSet;</span><br><span class="line">    <span class="keyword">private</span> Map countriesMap;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;<span class="comment">//Map key-value String 一种特</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>xml 实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl2.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl2.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scoreArr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.mapper.impl2.Course&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">外部引入 bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;countriesMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;b&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;friendSet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;aa&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;bb&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="FactoryBean机制"><a href="#FactoryBean机制" class="headerlink" title="FactoryBean机制"></a>FactoryBean机制</h3><ul><li><p>概述</p><ul><li>FactoryBean是Spring提供的一种 <strong>整合第三方框架</strong> 的常用机制。</li><li>和普通的bean不同，配置一个FactoryBean类型的bean，在 <strong>获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值</strong>。</li><li>通过这种机制，Spring可以帮我们把 <strong>复杂组件创建的详细过程和繁琐细节都屏蔽起来</strong> ，只把最简洁的使用界面展示给我们。</li><li>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;SqlSessionFactory&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一个工厂Bean&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//其实这里可以有更加复杂的代码，比如读取配置文件，映射文件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc2.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取IoC容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:spring3.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取Bean ！！！</span></span><br><span class="line">    <span class="comment">//方式1：按照id获取</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;factoryBean&quot;</span>,SqlSessionFactory.class);</span><br><span class="line">    <span class="comment">//使用Bean</span></span><br><span class="line">    System.out.println(sqlSessionFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="bean-的作用域"><a href="#bean-的作用域" class="headerlink" title="bean 的作用域"></a>bean 的作用域</h3><ul><li><p>singleton</p><ul><li>在 new 对象时创建</li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221007172703299.png" alt="image-20221007172703299"></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScope</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring4.xml&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">    <span class="type">Course</span> <span class="variable">course1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;course&quot;</span>, Course.class);</span><br><span class="line">    <span class="type">Course</span> <span class="variable">course2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;course&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(course1);</span><br><span class="line">    System.out.println(course2);</span><br><span class="line">    System.out.println(course1.hashCode());</span><br><span class="line">    System.out.println(course2.hashCode());</span><br><span class="line">    System.out.println(course1 == course2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>prototype</p><ul><li><p>在调用 getBean 时创建</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221007173512843.png" alt="image-20221007173512843"></p></li></ul></li></ul><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><ul><li><p>概述</p><ul><li>将注入的 bean 修改为自动注入</li></ul></li><li><p>按类型自动装配 （autowire=”byType”）</p><ul><li>注意事项，只能有一个 bean，因为根据 class=”xxx” 来的</li></ul></li><li><p>按名称自动装配 （autowire=”byname”）</p><ul><li><p>注意事项，名字必须是自己定义字段时的名字</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221007175057917.png" alt="image-20221007175057917"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis （三）</title>
      <link href="//post/c962101e57c0/"/>
      <url>//post/c962101e57c0/</url>
      
        <content type="html"><![CDATA[<h3 id="关联查询环境搭建"><a href="#关联查询环境搭建" class="headerlink" title="关联查询环境搭建"></a>关联查询环境搭建</h3><ul><li><p>环境搭建</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221004110113389.png" alt="image-20221004110113389"></p></li></ul><h3 id="关联查询之一对一"><a href="#关联查询之一对一" class="headerlink" title="关联查询之一对一"></a>关联查询之一对一</h3><ul><li><p>需求</p><ul><li>根据 id 查询订单信息，关联查询用户信息</li></ul></li><li><p>代码实现</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> tb_order</span><br><span class="line">             <span class="keyword">inner</span> <span class="keyword">join</span> tb_customer <span class="keyword">on</span> tb_order.customer_no <span class="operator">=</span> tb_customer.customer_id <span class="keyword">where</span> order_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_order</span><br><span class="line">                 inner join tb_customer on tb_order.customer_no = tb_customer.customer_id where order_id = #&#123;orderId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>分析原因</p><ul><li>前两个有相关的映射，但是后面三个没有相关的映射，因此要重写输出映射</li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221004114256145.png" alt="image-20221004114256145"></p></li></ul><ul><li><p>代码改进</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderState&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_state&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_order</span><br><span class="line">                 inner join tb_customer on tb_order.customer_no = tb_customer.customer_id where order_id = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="关联查询之一对多"><a href="#关联查询之一对多" class="headerlink" title="关联查询之一对多"></a>关联查询之一对多</h3><ul><li><p>需求</p><ul><li>根据 id 查询用户信息，关联查询订单信息</li></ul></li><li><p>代码实现</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">   <span class="keyword">from</span> tb_customer</span><br><span class="line">       <span class="keyword">inner</span> <span class="keyword">join</span> tb_order <span class="keyword">on</span> tb_customer.customer_id <span class="operator">=</span> tb_order.customer_no</span><br><span class="line">   <span class="keyword">where</span> customer_id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderState&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_state&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_order</span><br><span class="line">             inner join tb_customer on tb_order.customer_no = tb_customer.customer_id where order_id = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><ul><li>概述<ul><li>将一个单表查询拆成多个单表查询，延迟加载（懒加载）</li></ul></li><li>分类<ul><li>一对一</li><li>一对多</li></ul></li></ul><h3 id="分步查询之一对一"><a href="#分步查询之一对一" class="headerlink" title="分步查询之一对一"></a>分步查询之一对一</h3><ul><li><p>需求</p><ul><li>查询所有订单记录，关联用户记录</li></ul></li><li><p>步骤分析</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有订单信息,此时查询出来的 customer_no 为 1， 2， 3</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询用户信息, customer_no 为 1， 2， 3</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_customer <span class="keyword">WHERE</span> customer_id <span class="operator">=</span> customer_no;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Order&gt; <span class="title function_">selectAllByOrders</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderState&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_state&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            里面的数据由第二次查询来显示</span></span><br><span class="line"><span class="comment">                即根据 customer_no 来进行查询 tb_customer</span></span><br><span class="line"><span class="comment">            select: 调用第二次单表查询,具体到接口方法</span></span><br><span class="line"><span class="comment">            column: 传递的字段，即为 customer_no</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mapper.CustomerMapper.selectCustomerById2&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByOrders&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap2&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_order</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    Customer <span class="title function_">selectCustomerById2</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.CustomerMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二次代码查询    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCustomerById2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_customer where customer_id = #&#123;customerId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分步查询之一对多"><a href="#分步查询之一对多" class="headerlink" title="分步查询之一对多"></a>分步查询之一对多</h3><ul><li><p>需求</p><ul><li>查询所有用户记录，分步查询订单记录</li></ul></li><li><p>分析</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有用户记录 (customer_id)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分步查询订单记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_order <span class="keyword">where</span> customer_no <span class="operator">=</span> #&#123;上面查到的 customer_id&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; <span class="title function_">selectAllByCustomerId</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.CustomerMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;customerMap2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mapper.OrderMapper.selectOrderByCustomerId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByCustomerId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;customerMap2&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_customer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Order <span class="title function_">selectOrderByCustomerId</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.atguigu.mapper.OrderMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectOrderByCustomerId&quot;</span> resultType=<span class="string">&quot;order&quot;</span>&gt;</span><br><span class="line">        select *</span><br><span class="line">        from tb_order</span><br><span class="line">        <span class="type">where</span> <span class="variable">customer_no</span> <span class="operator">=</span> #&#123;customerId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ul><li>注意事项：<ul><li><strong>一对一</strong> 使用的是 association 标签</li><li><strong>一对多</strong>  使用的是 collection标签</li><li>主要看 javabean 设置的类型，从而来考虑使用什么标签</li></ul></li></ul><h3 id="mybatis-延迟加载（懒加载）"><a href="#mybatis-延迟加载（懒加载）" class="headerlink" title="mybatis 延迟加载（懒加载）"></a>mybatis 延迟加载（懒加载）</h3><ul><li>概述<ul><li>数据被使用的时候才查询，不使用的时候不查询</li></ul></li><li>优点<ul><li>能够大幅度节省空间，提高 查询效率</li></ul></li><li>使用场景<ul><li>多用于<strong>一对多</strong></li></ul></li></ul><h3 id="延迟加载之一对一"><a href="#延迟加载之一对一" class="headerlink" title="延迟加载之一对一"></a>延迟加载之一对一</h3><ul><li><p>开启延迟加载</p><ul><li>查看<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">官网</a></li><li>设置 lazyLoadingEnabled = true</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderState&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_state&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         里面的数据由第二次查询来显示</span></span><br><span class="line"><span class="comment">             即根据 customer_no 来进行查询 tb_customer</span></span><br><span class="line"><span class="comment">         select: 调用第二次单表查询,具体到接口方法</span></span><br><span class="line"><span class="comment">         column: 传递的字段</span></span><br><span class="line"><span class="comment">fetchType: 局部的全局加载，eager 关闭懒加载，lazy 开启</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mapper.CustomerMapper.selectCustomerById2&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">column</span>=<span class="string">&quot;customer_no&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span></span></span><br><span class="line"><span class="tag">     &gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByOrders&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap2&quot;</span>&gt;</span></span><br><span class="line">     select *</span><br><span class="line">     from tb_order</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="延迟加载之一对多"><a href="#延迟加载之一对多" class="headerlink" title="延迟加载之一对多"></a>延迟加载之一对多</h3><ul><li>概述<ul><li>与上面一致</li></ul></li></ul><h3 id="缓存概述"><a href="#缓存概述" class="headerlink" title="缓存概述"></a>缓存概述</h3><ul><li><p>概述</p><ul><li>将查询的数据放到内存中</li></ul></li><li><p>优点</p><ul><li>减少与数据库的交互次数，提高效率</li></ul></li><li><p>缺点</p><ul><li>影响了数据时效性，不能及时更新</li></ul></li><li><p>分类</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221004144917317.png" alt="image-20221004144917317"></p><ul><li>一级缓存：只能在 SqlSession 中共享数据，类似于Session域对象</li><li>二级缓存：在整个项目中共享缓存，类似于ServletContext域对象</li></ul></li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>概述<ul><li>在同一个方法中，sqlSession 查询 操作采用的就是一级缓存</li></ul></li></ul><h3 id="清空一级缓存"><a href="#清空一级缓存" class="headerlink" title="清空一级缓存"></a>清空一级缓存</h3><ul><li>概述<ul><li>默认情况下，DML（修改数据库数据时） 会自动清空缓存</li><li>也可以通过clearCache()手动清空一级缓存。</li></ul></li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li><p>概述</p><ul><li>二级缓存是 mapper 映射级别的缓存，多个 sqlSession 去操作同一个 mapper 映射的 sql 语句，多个SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的</li></ul></li><li><p>开发步骤</p><ul><li><p>修改配置文件，默认已经开启</p></li><li><p>编写 mapper 映射文件</p><ul><li><p>添加<cache>标签</p></li><li><p>配置statement，使用userCache属性操作缓存，true  和 false 两个值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前 mapper 支持二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前 statement 也支持 (useCache)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>javabean对象实现Serializable接口，序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserById2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 user 对象存储到二级缓存中</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221004152334778.png" alt="image-20221004152334778"></p></li><li><p>Cache Hit Ratio：缓存命中率，越高越好</p></li><li><p>第一次没使用缓存，所以为 0.0</p></li><li><p>第二次使用缓存，所以为 0.5 （利用缓存次数/总次数计算）</p></li></ul><h3 id="逆向工程了解"><a href="#逆向工程了解" class="headerlink" title="逆向工程了解"></a>逆向工程了解</h3><ul><li>概述<ul><li>正向工程<ul><li>先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</li></ul></li><li>逆向工程<ul><li>先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类 </li><li>Mapper接口 </li><li>Mapper配置文件</li></ul></li></ul></li></ul></li></ul><h3 id="逆向工程操作"><a href="#逆向工程操作" class="headerlink" title="逆向工程操作"></a>逆向工程操作</h3><ul><li><p>开发步骤</p><ul><li><p>新建一个项目</p></li><li><p>引入相关 jar 包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>编写逆向工程核心配置文件 generatorConfig.xml</p><ul><li>修改的地方 connectionURL 连接的库</li><li>javaModelGenerator 表示 JavaBean 生成的目录</li><li>sqlMapGenerator 表示 mapper 映射生成的目录</li><li>javaClientGenerator 表示 mapper 接口生成的目录</li><li>table 操作数据库的哪张表，以及对应的实体类类名</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">                    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">                    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.bean&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;test&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置完成后，点击 mybatis-generator</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221004154803286.png" alt="image-20221004154803286"></p></li></ul><h3 id="QBC-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h3><ul><li><p>概述</p><ul><li>QBC查询最大的特点就是将SQL语句中的WHERE子句进行了组件化的封装，让我们可以通过调用Criteria对象的方法自由的拼装查询条件</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mapper.insert(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择插入，若值为 null，则不插入 null 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertSelective</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mapper.insertSelective(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件进行删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExample</span>();</span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在区间之间的 id 进行删除，即批量删除</span></span><br><span class="line">        criteria.andIdBetween(<span class="number">13</span>,<span class="number">14</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.deleteByExample(example);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键进行删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.deleteByPrimaryKey(<span class="number">15</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键来进行选择修改，</span></span><br><span class="line"><span class="comment">     *      若值为 null，则表示该字段不进行修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">8</span>,<span class="literal">null</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.updateByPrimaryKeySelective(record);</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键来进行修改，若值为 null，</span></span><br><span class="line"><span class="comment">     *  则表示该字段会被修改为 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateByPrimaryKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">8</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;8&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.updateByPrimaryKey(record);</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件来进行修改，若值为 null，</span></span><br><span class="line"><span class="comment">     *  则表示该字段会被修改为 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateByExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">8</span>,<span class="string">&quot;lisi2&quot;</span>,<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">        <span class="type">UserExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExample</span>();</span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">        criteria.andIdEqualTo(<span class="number">8</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.updateByExample(record, example);</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件来进行选择修改，</span></span><br><span class="line"><span class="comment">     *      若值为 null，则表示该字段不进行修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateByExampleSelective</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">8</span>,<span class="literal">null</span>,<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">        <span class="type">UserExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExample</span>();</span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">        criteria.andIdEqualTo(<span class="number">8</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.updateByExampleSelective(record, example);</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键进行查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByPrimaryKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="number">12</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件进行查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExample</span>();</span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">        criteria.andIdEqualTo(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 或者 的条件</span></span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">or</span> <span class="operator">=</span> example.or();</span><br><span class="line">        or.andNameLike(<span class="string">&quot;%t%&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; users = mapper.selectByExample(example);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countByExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExample</span>();</span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">        criteria.andIdEqualTo(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 或者 的条件</span></span><br><span class="line">        UserExample.<span class="type">Criteria</span> <span class="variable">or</span> <span class="operator">=</span> example.or();</span><br><span class="line">        or.andNameLike(<span class="string">&quot;%t%&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.countByExample(example);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="mybatis注解开发"><a href="#mybatis注解开发" class="headerlink" title="mybatis注解开发"></a>mybatis注解开发</h3><ul><li>概述<ul><li>这几年来注解开发越来越流行，MyBatis也可以使用注解开发方式，这样就可以减少编写 Mapper映射文件了。</li></ul></li><li>常用注解<ul><li>@Insert </li><li>@Delete </li><li>@Update </li><li>@Select </li><li>@Results </li><li>@One </li><li>@Many</li></ul></li></ul><h3 id="mybatis注解操作CRUD"><a href="#mybatis注解操作CRUD" class="headerlink" title="mybatis注解操作CRUD"></a>mybatis注解操作CRUD</h3><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_user values(null,#&#123;userName&#125;,#&#123;userPwd&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User inputUser)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tb_user where user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUserById</span><span class="params">(Integer userId)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tb_user set user_name = #&#123;userName&#125; , user_pwd = #&#123;userPwd&#125; , money = #&#123;money&#125; where user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUserById</span><span class="params">(User inputUser)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where user_id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">selectUserById</span><span class="params">(Integer userId)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="复杂关系映射注解说明"><a href="#复杂关系映射注解说明" class="headerlink" title="复杂关系映射注解说明"></a>复杂关系映射注解说明</h3><ul><li>@Results注解<ul><li>相当于resultMap标签，定义输出映射规则</li></ul></li><li>@Result 注解<ul><li>相当于id标签、result标签、association标签(配置@One)、collection标签(配合@Many)，定义属性的映射规则</li></ul></li><li>@One<ul><li>配合@Result注解使用，一对一，相当于association标签</li></ul></li><li>@Many<ul><li>配置@Result注解使用，一对多，相当于collection标签</li></ul></li></ul><h3 id="注解实现一对一查询"><a href="#注解实现一对一查询" class="headerlink" title="注解实现一对一查询"></a>注解实现一对一查询</h3><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true, property = &quot;orderId&quot;, column = &quot;order_id&quot;, javaType = Integer.class),</span></span><br><span class="line"><span class="meta">        @Result(id = false, property = &quot;orderState&quot;, column = &quot;order_state&quot;, javaType = String.class),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">                id = false,</span></span><br><span class="line"><span class="meta">                property = &quot;customer&quot;,</span></span><br><span class="line"><span class="meta">                javaType = Customer.class,</span></span><br><span class="line"><span class="meta">                one = @One(</span></span><br><span class="line"><span class="meta">                        select = &quot;com.atguigu.mapper.CustomerMapper.selectCustomerById&quot;,//调用第二次单表查询</span></span><br><span class="line"><span class="meta">                        fetchType = FetchType.LAZY</span></span><br><span class="line"><span class="meta">                ),</span></span><br><span class="line"><span class="meta">                column = &quot;customer_no&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from tb_order where order_id = #&#123;orderId&#125;&quot;)</span><span class="comment">//①①第一次单表查询:customer_no</span></span><br><span class="line">Order <span class="title function_">selectOrderById</span><span class="params">(Integer orderId)</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_customer where customer_id = #&#123;customerId&#125;&quot;)</span><span class="comment">//第二次单表查询</span></span><br><span class="line">    Customer <span class="title function_">selectCustomerById</span><span class="params">(Integer customerId)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注解实现一对多查询"><a href="#注解实现一对多查询" class="headerlink" title="注解实现一对多查询"></a>注解实现一对多查询</h3><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true, property = &quot;customerId&quot;, column = &quot;customer_id&quot;, javaType = Integer.class),</span></span><br><span class="line"><span class="meta">        @Result(id = false, property = &quot;customerName&quot;, column = &quot;customer_name&quot;, javaType = String.class),</span></span><br><span class="line"><span class="meta">        @Result(id = false, property = &quot;address&quot;, column = &quot;address&quot;, javaType = String.class),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">                id = false,</span></span><br><span class="line"><span class="meta">                property = &quot;orderList&quot;,</span></span><br><span class="line"><span class="meta">                many = @Many(</span></span><br><span class="line"><span class="meta">                        select = &quot;com.atguigu.mapper.OrderMapper.selectOrderListByCustomerId&quot;,//调用第二次单表查询</span></span><br><span class="line"><span class="meta">                        fetchType = FetchType.LAZY</span></span><br><span class="line"><span class="meta">                ),</span></span><br><span class="line"><span class="meta">                column = &quot;customer_id&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from tb_customer where customer_id = #&#123;customerId&#125;&quot;)</span><span class="comment">//②①第一次单表查询</span></span><br><span class="line">Customer <span class="title function_">selectCustomerById2</span><span class="params">(Integer customerId)</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_order where customer_no = #&#123;customerId&#125;&quot;)</span></span><br><span class="line">List&lt;Order&gt; <span class="title function_">selectOrderListByCustomerId</span><span class="params">(Integer customerId)</span> <span class="keyword">throws</span> Exception;<span class="comment">//②①第二次单表查询</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis （二）</title>
      <link href="//post/c28bf60a0672/"/>
      <url>//post/c28bf60a0672/</url>
      
        <content type="html"><![CDATA[<h3 id="给sql语句传参"><a href="#给sql语句传参" class="headerlink" title="给sql语句传参"></a>给sql语句传参</h3><ul><li><p>根据账户名模糊查询</p></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserLikeByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = &quot;%&quot;#&#123;username&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserLikeByUsername2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = &quot;%&quot;#&#123;username&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>两种方式</p><ul><li><h1 id="和"><a href="#和" class="headerlink" title="{} 和 ${}"></a>{} 和 ${}</h1></li><li><h1 id="不能直接拼接字符，因此防注入，-反之"><a href="#不能直接拼接字符，因此防注入，-反之" class="headerlink" title="{} 不能直接拼接字符，因此防注入，${}反之"></a>{} 不能直接拼接字符，因此防注入，${}反之</h1></li><li>“%”#{username}”%”，”%${username}%”</li><li><h1 id="不能向-sql-传递表名，-可以向-sql-传递表名"><a href="#不能向-sql-传递表名，-可以向-sql-传递表名" class="headerlink" title="{} 不能向 sql 传递表名，${} 可以向 sql 传递表名"></a>{} 不能向 sql 传递表名，${} 可以向 sql 传递表名</h1></li></ul></li></ul><h3 id="输入映射之零散简单类型"><a href="#输入映射之零散简单类型" class="headerlink" title="输入映射之零散简单类型"></a>输入映射之零散简单类型</h3><ul><li><p>概述</p><ul><li>输入多个简单类型的值</li></ul></li><li><p>需求</p><ul><li>根据账户和密码进行查询</li></ul></li><li><p>代码实现</p><ul><li><p>方法一：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--没有输入映射，因为不确定类型，可能有多个类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNameAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = #&#123;username&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--报错：</span></span><br><span class="line"><span class="comment">Parameter &#x27;username&#x27; not found. Available parameters are [arg1, arg0, param1, param2]</span></span><br><span class="line"><span class="comment">发现，statement 语句不能直接写变量名，需要写 [arg1, arg0, param1, param2] 来代替参数的位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--没有输入映射，因为不确定类型，可能有多个类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNameAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = #&#123;agr0&#125;</span><br><span class="line">          and password = #&#123;agr1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">selectUserByNameAndPwd</span><span class="params">(String username,String password)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二（常用）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--没有输入映射，因为不确定类型，可能有多个类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNameAndPwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = #&#123;username&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectUserByNameAndPwd</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span>String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="输入映射之实体类型"><a href="#输入映射之实体类型" class="headerlink" title="输入映射之实体类型"></a>输入映射之实体类型</h3><ul><li><p>概述</p></li><li><p>mybatis 会根据 #{} 传入数据，加工成 getXXX() 方法，通过反射调用这个方法，获取对应数据，然后填充到相应的位置 </p></li><li><p>需求</p><ul><li>根据账户和密码查询</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 此时通过反射输入，因此 #&#123;&#125; 对应的就是 User 里面的变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNameAndPwd2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = #&#123;name&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserByNameAndPwd2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user1.setPassword(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.selectUserByNameAndPwd2(user1);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>注意：输入映射可以省略</li></ul><h3 id="输入映射之map"><a href="#输入映射之map" class="headerlink" title="输入映射之map"></a>输入映射之map</h3><ul><li><p>概述</p><ul><li>当零散类型太多时，而我们又不想使用 @Parm 参数，此时便可以使用 map 集合来处理</li></ul></li><li><p>使用场景</p><ul><li>能够使用 Java 对象就使用 Java 对象，没有 Java 对象时，就使用 map 封装</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNameAndPwd3&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where name = #&#123;username&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项，此时的 #{} 值必须与 map 的键保持一致</p></li></ul><h3 id="输出映射之简单类型"><a href="#输出映射之简单类型" class="headerlink" title="输出映射之简单类型"></a>输出映射之简单类型</h3><ul><li><p>概述</p><ul><li>输出一个简单的类型结果</li></ul></li><li><p>需求</p><ul><li>查询用户的总记录数</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    Long selectTotalCount() throws Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="输出映射之实体类型"><a href="#输出映射之实体类型" class="headerlink" title="输出映射之实体类型"></a>输出映射之实体类型</h3><ul><li><p>概述</p><ul><li>输出一个 javabean 对象结果</li></ul></li><li><p>需求</p><ul><li>根据账户和密码查询用户</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsernameAndUserPwd4&quot;</span>&gt;</span></span><br><span class="line">select * </span><br><span class="line">    from test</span><br><span class="line">    where name=#&#123;username&#125;</span><br><span class="line">    and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="输出映射Map"><a href="#输出映射Map" class="headerlink" title="输出映射Map"></a>输出映射Map</h3><ul><li><p>概述</p><ul><li>使用与 Sql 查询返回各个字段综合起来并不与任何一个实体类想对应（比如多表查询的时候），无法封装到实体类中，此时使用 Map 封装</li><li>字段名是 map 的键，字段值是 map 的值</li></ul></li><li><p>需求</p><ul><li>根据 id 查询用户</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map <span class="title function_">selectUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="输出映射之-List-集合"><a href="#输出映射之-List-集合" class="headerlink" title="输出映射之 List 集合"></a>输出映射之 List 集合</h3><ul><li><p>概述</p><ul><li>将查询的返回的多个实体类对象，放到 List 集合中</li><li>此时不需要做任何特殊处理，在 resultType 属性中还是设置实体类型类型</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="输出映射之-resultMap"><a href="#输出映射之-resultMap" class="headerlink" title="输出映射之 resultMap"></a>输出映射之 resultMap</h3><ul><li><p>概述</p><ul><li>如果数据库字段和实体类属性名称不一致，那么可以用三种方式解决<ul><li>设置别名</li><li>设置规则</li><li>resultMap</li></ul></li><li>resultMap 也可使用与多表查询</li></ul></li><li><p>代码实现，resultMap 需要自己写映射</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id: 对应下面 resultMap=&quot;userMap&quot;，表示重写规则</span></span><br><span class="line"><span class="comment">    type: 对应输出的映射，即com.atguigu.bean.User</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            column: 数据库中的字段名</span></span><br><span class="line"><span class="comment">            property: javabean 中对应的属性名</span></span><br><span class="line"><span class="comment">            javaType: 属性名的类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userPassword&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByResultMap&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="insert-主键返回"><a href="#insert-主键返回" class="headerlink" title="insert 主键返回"></a>insert 主键返回</h3><ul><li><p>概述</p><ul><li>插入数据后，返回插入数据的 id</li></ul></li><li><p>代码实现</p><ul><li><p>方法一：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    useGeneratedKeys: 拿到生成添加成功后生成的主键值</span></span><br><span class="line"><span class="comment">    keyProperty: 拿到的主键值放到哪儿去，此时放到对应的 JavaBean的 id 中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into test</span><br><span class="line">    values (null, #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>方法二：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      selectKey: 查键值</span></span><br><span class="line"><span class="comment">      keyProperty: 拿到的主键值放到哪儿去，此时放到对应的 JavaBean的 id 中</span></span><br><span class="line"><span class="comment">      keyColumn: 数据库中的字段</span></span><br><span class="line"><span class="comment">      order: 在插入之前返回值还是插入之后返回</span></span><br><span class="line"><span class="comment">resultType: 映射类型</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">      insert into test</span><br><span class="line">      values (null, #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line">      <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">          select last_insert_id();</span><br><span class="line">      <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="动态sql片段"><a href="#动态sql片段" class="headerlink" title="动态sql片段"></a>动态sql片段</h3><ul><li><p>概述</p><ul><li><p>在开发中，Sql 的拼接很常见，有很多 sql 具有高重复性的特点，这时把重复的 sql 抽取出来，作为公用 sql 片段</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221003153837264.png" alt="image-20221003153837264"></p></li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;sql1&quot;</span>&gt;</span></span><br><span class="line">        (null , #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUSer3&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into test values</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;sql1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="动态-sql-之-if-标签"><a href="#动态-sql-之-if-标签" class="headerlink" title="动态 sql 之 if 标签"></a>动态 sql 之 if 标签</h3><ul><li><p>概述</p><ul><li>根据条件进行判断</li></ul></li><li><p>需求</p><ul><li>如果账户和密码都没有就查询所有用户记录</li><li>如果只有账户，就根据账户查询用户记录</li><li>如果只有密码，就根据密码查询用户记录</li><li>如果账户和密码都有，就根据账户和密码查询用户记录</li></ul></li><li><p>代码实现</p><ul><li><p>方案一（不优雅，存在 1=1）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserListByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from test</span><br><span class="line">    where 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>方案二：使用 <strong>where</strong> 标签</li></ul><h3 id="动态-sql-之where-标签"><a href="#动态-sql-之where-标签" class="headerlink" title="动态 sql 之where 标签"></a>动态 sql 之where 标签</h3><ul><li><p>概述</p><ul><li>where 标签会自动去掉标签体前多余的标签</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserListByWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from test</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="动态-sql-之-trim-标签"><a href="#动态-sql-之-trim-标签" class="headerlink" title="动态 sql 之 trim 标签"></a>动态 sql 之 trim 标签</h3><ul><li><p>概述</p><ul><li>可通过 prefix，prefixOverride，suffix，suffixOverride设置 sql 语句的前缀或者后缀</li></ul></li></ul><ul><li><p>属性说明</p><p>| 属性           |                                |<br>| ——————— | ——————————————— |<br>| prefix         | 条件为true，动态添加前缀       |<br>| prefixOverride | 条件为true，动态移除第一个前缀 |<br>| suffix         | 条件为true，动态添加后缀       |<br>| suffixOverride | 条件为true，动态移除第一个后缀 |</p></li></ul><ul><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当 if 标签有一个成立时，</span></span><br><span class="line"><span class="comment">就会添加 where 前缀，</span></span><br><span class="line"><span class="comment">同时便会去掉 and 前缀</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserListByTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">       select *</span><br><span class="line">       from test</span><br><span class="line">       <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               and name = #&#123;name&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               and password = #&#123;password&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="动态-sql-之-set-标签"><a href="#动态-sql-之-set-标签" class="headerlink" title="动态 sql 之 set 标签"></a>动态 sql 之 set 标签</h3><ul><li><p>概述</p><ul><li>动态生成 set 关键字，会自动去掉标签体内后面多余的逗号</li></ul></li><li><p>需求</p><ul><li>根据 id 修改信息</li></ul></li><li><p>代码实现</p><ul><li><p>方案一(存在问题)：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">当 name 和 password 不给值时，</span></span><br><span class="line"><span class="comment">则会将数据库中的值修改为 null，因为变量默认值为null</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBySet&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">       update test</span><br><span class="line">       set name     = #&#123;name&#125;,</span><br><span class="line">           password = #&#123;password&#125;</span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>方案二(存在问题)：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">当 password 没有值的时候</span></span><br><span class="line"><span class="comment">则 name 后面多出一个逗号，</span></span><br><span class="line"><span class="comment">此时 sql 语句会报错</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBySet2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">       update test</span><br><span class="line">       set</span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">           and name = #&#123;name&#125;,</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">           and password = #&#123;password&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方案三：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBySet2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    update test</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and name = #&#123;name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="动态-sql-之-foreach-标签"><a href="#动态-sql-之-foreach-标签" class="headerlink" title="动态 sql 之 foreach 标签"></a>动态 sql 之 foreach 标签</h3><ul><li><p>概述</p><ul><li>用于进行批量操作</li></ul></li><li><p>需求</p><ul><li>批量查询：根据多个 id 进行查询</li><li>批量添加</li><li>批量修改</li></ul></li><li><p>批量查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- select * from test where id in(1,2,3)</span></span><br><span class="line"><span class="comment">    collection: 操作的是一个 list 集合</span></span><br><span class="line"><span class="comment">    item: 类似 for i in xxx 中的 i, 即迭代对象</span></span><br><span class="line"><span class="comment">    open: 起始位置添加的东西</span></span><br><span class="line"><span class="comment">    separator: 分隔符</span></span><br><span class="line"><span class="comment">    close: 结束位置添加的东西</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from test</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- select * from test where id = 1 or id = 2 or id = 3; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIds2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from test</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>批量添加</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>), (<span class="keyword">null</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- insert into test values (null,&#x27;zhangsan&#x27;,&#x27;123456&#x27;), (null,&#x27;lisi&#x27;,&#x27;123456&#x27;); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span></span><br><span class="line">    insert into test values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span>  <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        (null,#&#123;user.name&#125;,#&#123;user.password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span> </span><br></pre></td></tr></table></figure><ul><li><p>批量修改 (设置运行执行多条sql语句)，未设置则会报错</p><ul><li>allowMultiQueries=true，在 mysql 中的 url 后添加</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> name <span class="operator">=</span> #&#123;name&#125;, password <span class="operator">=</span> #&#123;password&#125; <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;;</span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> name <span class="operator">=</span> #&#123;name&#125;, password <span class="operator">=</span> #&#123;password&#125; <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;;</span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> name <span class="operator">=</span> #&#123;name&#125;, password <span class="operator">=</span> #&#123;password&#125; <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    update test set name = #&#123;name&#125;, password = #&#123;password&#125; where id = #&#123;id&#125;;</span></span><br><span class="line"><span class="comment">    update test set name = #&#123;name&#125;, password = #&#123;password&#125; where id = #&#123;id&#125;;</span></span><br><span class="line"><span class="comment">    update test set name = #&#123;name&#125;, password = #&#123;password&#125; where id = #&#123;id&#125;;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update test set name = #&#123;user.name&#125; , password = #&#123;user.password&#125; where id = #&#123;user.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多表关系设计回顾"><a href="#多表关系设计回顾" class="headerlink" title="多表关系设计回顾"></a>多表关系设计回顾</h3><ul><li>—对—<ul><li>比如:  公司和注册地址</li><li>根据一个公司查询一个注册地址（一对一查询）</li><li>根据一个注册地址查询一个公司（一对一查询）</li></ul></li><li>一对多<ul><li>比如:  部门和员工</li><li>根据一个部门查询多个员工（一对多查询）</li><li>根据一个员工查询一个部门（一对一查询）</li></ul></li><li>多对多<ul><li>比如:  课程和学生</li><li>根据一个课程查询多个学生（一对多查询）</li><li>根据一个学生查询多个课程（一对多查询）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis （一）</title>
      <link href="//post/c96d3cd75146/"/>
      <url>//post/c96d3cd75146/</url>
      
        <content type="html"><![CDATA[<h3 id="原始-JDBC-存在的问题"><a href="#原始-JDBC-存在的问题" class="headerlink" title="原始 JDBC 存在的问题"></a>原始 JDBC 存在的问题</h3><ul><li><p>代码实现</p></li><li><p>存在的问题</p><ul><li>频率的创建连接和销毁连接</li><li>不同的驱动，以及连接的 url，账户，密码改变时，存在字符串编码问题</li><li>手动给 sql 占位符 “？” 语句赋值</li><li>手动将结果集处理成 java 对象，也就是需要手动输出映射</li><li>手动释放资源</li></ul></li><li><p>解决思路</p><ul><li><p>连接池</p></li><li><p>将连接的语句放到配置文件中</p></li><li><p>输入映射：使用反射 + 缺省操作</p></li><li><p>输出映射：使用反射 + 缺省操作</p></li><li><p>缺省操作</p></li></ul></li></ul><h3 id="mybatis-基本概念"><a href="#mybatis-基本概念" class="headerlink" title="mybatis 基本概念"></a>mybatis 基本概念</h3><ul><li>概述<ul><li>基于  java 持久层框架，封装了 JDBC ，此时只需要关注 sql 语句即可，不需要关注驱动加载，连接，销毁</li></ul></li><li>mybatis 结构<ul><li><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220930175231741.png" alt="image-20220930175231741"></li></ul></li></ul><h3 id="mybatis-入门程序"><a href="#mybatis-入门程序" class="headerlink" title="mybatis 入门程序"></a>mybatis 入门程序</h3><ul><li><p>官网</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul></li><li><p>开发步骤</p><ul><li><p>引入相关依赖</p><ul><li><p>mybatis，mysql</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>编写 mybatis-config.xml 核心配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源，事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 事务管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper 映射，此时路径为 statement 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>mapper.xml 配置文件如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名空间，当有多个相同的 id 时，此时可以更改命名空间来区分，即查询的适合 [命名空间].id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- statement</span></span><br><span class="line"><span class="comment">        id: statement 唯一标识，实现接口查询时，需要使用</span></span><br><span class="line"><span class="comment">        parameterType: 查询的参数类型 （输入映射）</span></span><br><span class="line"><span class="comment">        resultType: 对应的映射 （输出映射）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编写 dao 接口并实现</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectUserById&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码测试</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> dao.selectUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>图解：</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220930195210459.png" alt="image-20220930195210459"></p></li></ul><h3 id="映射文件说明"><a href="#映射文件说明" class="headerlink" title="映射文件说明"></a>映射文件说明</h3><ul><li>映射文件<ul><li><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221001093040341.png" alt="image-20221001093040341"></li></ul></li></ul><h3 id="查询所有用户记录"><a href="#查询所有用户记录" class="headerlink" title="查询所有用户记录"></a>查询所有用户记录</h3><ul><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">     select *</span><br><span class="line">     from test</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="添加用户（删除同理，输入映射为-int-类型）"><a href="#添加用户（删除同理，输入映射为-int-类型）" class="headerlink" title="添加用户（删除同理，输入映射为 int 类型）"></a>添加用户（删除同理，输入映射为 int 类型）</h3><ul><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此时插入的名字要和 User 里面一致，此时注意只有输入映射，没有输出映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">    insert into test</span><br><span class="line">    values (null, #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>注意的点，mybatis 里面的事务是手动提交，即插入成功后，还需要提交事务，才能看到成功的值</li></ul><ul><li><p>实现的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">// openssion 可开启事务自动提交，默认值为 false</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;addUser&quot;</span>,user);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 也可在这里自动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> insert;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><ul><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">    update test</span><br><span class="line">    set name = #&#123;name&#125;,</span><br><span class="line">        password =#&#123;password&#125;</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;updateUser&quot;</span>, user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SqlSessionFactory-优化"><a href="#SqlSessionFactory-优化" class="headerlink" title="SqlSessionFactory 优化"></a>SqlSessionFactory 优化</h3><ul><li><p>传统方式：dao 接口 + dao 接口实现子类 + mapper 映射文件</p></li><li><p>查看官网，发现这样一句话</p><ul><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li></ul></li><li><p>此时，对代码进行优化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后续 SqlSessionFactory 是由 Spring 容器通过 UserDaoImpl(SqlSessionFactory sqlSessionFactory) 构造器生成</span></span><br><span class="line">    <span class="comment">// Spring 容器可以保证 SqlSessionFactory 是单列的!!!</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该注解表示此方法过时</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectUserById&quot;</span>,id);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUserAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; all = sqlSession.selectList(<span class="string">&quot;selectUserAll&quot;</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;addUser&quot;</span>,user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> insert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;deleteUser&quot;</span>, id);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;updateUser&quot;</span>, user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂时没学 Spring 容器，使用暂时使用该方法初始化</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(sqlSessionFactory);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> dao.selectUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(sqlSessionFactory);</span><br><span class="line">        List&lt;User&gt; users = dao.selectUserAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(sqlSessionFactory);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dao.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;xiaozhang&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        System.out.println(i == <span class="number">1</span> ? <span class="string">&quot;插入成功&quot;</span> : <span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(sqlSessionFactory);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dao.deleteUser(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i == <span class="number">1</span> ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(sqlSessionFactory);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dao.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;李五&quot;</span>,<span class="string">&quot;45678&quot;</span>));</span><br><span class="line">        System.out.println(i == <span class="number">1</span> ? <span class="string">&quot;修改成功&quot;</span> : <span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="mybatis-接口代理开发"><a href="#mybatis-接口代理开发" class="headerlink" title="mybatis 接口代理开发"></a>mybatis 接口代理开发</h3><ul><li><p>此时存在问题</p><ul><li>dao 接口实现子类太多，难以维护</li><li>dao 接口实现子类和 mapper 映射文件之间存在耦合</li><li>此时，就得考虑删除 dao 接口实现子类</li></ul></li><li><p>组成</p><ul><li>dao 接口 + mapper 映射文件</li></ul></li><li><p>开发步骤</p><ul><li>编写 dao 接口</li><li><p>编写 mapper 映射文件</p><ul><li>映射文件放到和 dao 接口相同目录下<ul><li>即 dao 在 a.b.c 目录下，此时在 resource 目录下也要建 a.b.c 的目录，再写 mapper 文件</li></ul></li><li>映射文件名与 dao 接口名一致</li><li>此时的 namespace = “dao 接口的全类名”<ul><li>即 为dao接口所在的位置 a.b.c.dao</li></ul></li><li>statement 的 id 必须与 接口中的方法名一致</li><li>statement 中的 parameType 和 dao 接口中的方法形参类型一致</li><li>statement 中的 resultType 和 dao 接口中的方法返回值类型一致</li></ul></li><li><p>定义 dao 接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUserAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>编写 mybatis-config.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper 映射，此时需要主要 mapper 映射的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/atguigu/dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编写 mapper 映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from test</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 此时插入的名字要和 User 里面一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">        insert into test</span><br><span class="line">        values (null, #&#123;name&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from test</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">        update test</span><br><span class="line">        set name = #&#123;name&#125;,</span><br><span class="line">            password =#&#123;password&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时接口没有实现子类，因此需要使用 mapper 代理来实现</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> dao.selectUserById(<span class="number">2</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 UserDao 接口代理对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; users = dao.selectUserAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dao.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dao.deleteUser(<span class="number">4</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dao.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h3><ul><li>configuration<ul><li>properties</li><li>setting</li><li>typeAliases</li><li>plugins</li><li>environments</li><li>mappers</li></ul></li></ul><h3 id="mybatis-内置数据源"><a href="#mybatis-内置数据源" class="headerlink" title="mybatis 内置数据源"></a>mybatis 内置数据源</h3><ul><li>jndi<ul><li>使用 jndi 数据源</li></ul></li><li>pooled<ul><li>使用 pooled 数据源，内置数据源</li></ul></li><li>unpooled<ul><li>不适用 pooled 数据源，与 Spring 整合后，一般使用外部数据源，druid，c3p0等</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221001144324876.png" alt="image-20221001144324876"></p><h3 id="environments-标签"><a href="#environments-标签" class="headerlink" title="environments 标签"></a>environments 标签</h3><ul><li><p>xml 文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 默认使用策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不适用连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;UNPOOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper 映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/atguigu/dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h3><ul><li><p>可以设置配置文件的属性，当修改属性比较麻烦，此时便使用 properties</p><ul><li><p>外部导入（一般这种，降低耦合）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;JDBC.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper 映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/atguigu/dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/db?useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>内嵌</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper 映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/atguigu/dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意事项：</p><ul><li>properties标签 必须放在第一位</li></ul></li></ul><h3 id="setting标签与log4j"><a href="#setting标签与log4j" class="headerlink" title="setting标签与log4j"></a>setting标签与log4j</h3><ul><li><p>什么是 log4j，当我们执行 statement 时，只能看到结果，如果我们想看到过程，就可以使用 log4j，即 它是一个输出日志的 jar 包</p></li><li><p>开发步骤</p><ul><li><p>引入 log4j 依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>设置 setting 标签</p><ul><li><p>logImpl = LOG4J，可以查看<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">官网 </a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以省略，省略后自己查找--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>编写 log4j.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h3 id="mapUnderscoreToCamelCase-映射"><a href="#mapUnderscoreToCamelCase-映射" class="headerlink" title="mapUnderscoreToCamelCase 映射"></a>mapUnderscoreToCamelCase 映射</h3><ul><li><p>概述</p><ul><li><p>当我们数据库中使用下划线命名时（类似user_pwd），但是 Java 中写的是驼峰命名时（类似userPwd）</p></li><li><p>此时 statement 中的语句就会找不到相对应的映射，从而查询不到值</p></li><li><p>官网可以查看相关文档</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from test</span><br><span class="line">    where user_pwd = #&#123;userPwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>setting 配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="typeAliases-标签"><a href="#typeAliases-标签" class="headerlink" title="typeAliases 标签"></a>typeAliases 标签</h3><ul><li><p>概述</p><ul><li><p>当我们在 statement 中输入映射时，要写全类名（类似a.b.c.User），此时如果输出映射为全类名，就得重复编写</p></li><li><p>此时，就有了别名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20221001160556966.png" alt="image-20221001160556966"></p><ul><li><p>方案二：</p><ul><li><p>当 bean 过多时，逐个创建比较麻烦，此时可以使用 类名 即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="mapper-标签"><a href="#mapper-标签" class="headerlink" title="mapper 标签"></a>mapper 标签</h3><ul><li><p>概述</p><ul><li>加载mapper映射文件</li></ul></li><li><p>①方案一</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--既可以在传统dao开发中使用，也可以在接口代理开发中使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/atguigu/dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>②方案二</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在接口代理开发中使用，因为 UserDao 和 UserDao.xml 在同一个包下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.dao.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>③方案三(推荐)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在接口代理开发中使用，可以加载 dao 包下面的所有接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.dao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="pluging-插件"><a href="#pluging-插件" class="headerlink" title="pluging 插件"></a>pluging 插件</h3><ul><li><p>概述</p><ul><li>MyBatis可以使用第三方的插件对功能进行扩展，分页助手PageHelper是将分页的复杂操作 进行封装，使用简单的方式即可获得分页的相关数据</li></ul></li><li><p>开发步骤</p><ul><li>①引入pagehelper相关依赖</li><li>②编写SqlMapConfig.xml，配置分页插件</li><li>③定义service接口及其实现子类<ul><li>分页查询</li></ul></li><li>④代码测试</li></ul></li><li><p>①引入pagehelper相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>②编写SqlMapConfig.xml，配置分页插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 startPage 方法，就会在查询之前进行拦截，加入分页查询操作</span></span><br><span class="line"><span class="comment">                让全部查询转换成分页查询</span></span><br><span class="line"><span class="comment">reasonable：合理的，当查询负一页时，返回第一页的数据，当查询超过最后一页时，返回最后一页</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>③定义service接口及其实现子类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    PageInfo&lt;User&gt; <span class="title function_">selectUserListByPage</span><span class="params">(Integer currentPage,Integer pageSize)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageInfo&lt;User&gt; <span class="title function_">selectUserListByPage</span><span class="params">(Integer currentPage, Integer pageSize)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 表示要执行分页操作</span></span><br><span class="line">        PageHelper.startPage(currentPage,pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让全部查询变成分压查询，因此此时全部查询（此时 userDao 中有查询全部的方法）</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 dao 层代理对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = mapper.selectUserAll();</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>④代码测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUserListByPage</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        PageInfo&lt;User&gt; pageInfo = userService.selectUserListByPage(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;pageInfo = &quot;</span> + pageInfo);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数 : &quot;</span> + pageInfo.getPageNum());</span><br><span class="line">        System.out.println(<span class="string">&quot;每页记录数 : &quot;</span> + pageInfo.getPageSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;总页数 : &quot;</span> + pageInfo.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是第一页? &quot;</span> + pageInfo.isIsFirstPage());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是最后一页? &quot;</span> + pageInfo.isIsLastPage());</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数 : &quot;</span>  + pageInfo.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数据 :&quot;</span> + pageInfo.getList());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="//post/842c93777510/"/>
      <url>//post/842c93777510/</url>
      
        <content type="html"><![CDATA[<h2 id="maven框架"><a href="#maven框架" class="headerlink" title="maven框架"></a>maven框架</h2><h3 id="为啥要使用-maven-框架"><a href="#为啥要使用-maven-框架" class="headerlink" title="为啥要使用 maven 框架"></a>为啥要使用 maven 框架</h3><ul><li>整合的 jar 包的太多，需要维护，可能版本冲突问题</li><li>每个 IDE 可能目录结构不一样，项目维护比较麻烦</li></ul><h3 id="maven组成部分"><a href="#maven组成部分" class="headerlink" title="maven组成部分"></a>maven组成部分</h3><ul><li>项目对象模型：project object model<ul><li>根据 maven 中的 pom.xml 生成</li></ul></li><li>项目生命周期：project  lifecycle<ul><li>对项目的编译，运行，打包，部署等管理</li></ul></li><li>依赖管理系统：dependence management system<ul><li>对项目所依赖的 jar 包进行管理</li></ul></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>依赖管理<ul><li>对 jar 包进行管理</li></ul></li><li>统一项目目录管理</li><li>项目管理<ul><li>编译，运行，打包，部署等</li></ul></li></ul><h3 id="maven环境"><a href="#maven环境" class="headerlink" title="maven环境"></a>maven环境</h3><ul><li><p>下载</p><ul><li><a href="https://archive.apache.org/dist/maven/maven-3/">下载入口</a></li></ul></li><li><p>推荐</p><ul><li>idea2019 + maven3.5.4</li><li>idea2020及以上 + maven3.6.3</li></ul></li></ul><h3 id="maven-坐标"><a href="#maven-坐标" class="headerlink" title="maven 坐标"></a>maven 坐标</h3><ul><li>概述<ul><li>用于在 maven 仓库确定要使用的 jar 包</li><li>在确定公司，再确定项目，再确定版本</li></ul></li><li>组成<ul><li>groupid：公司名称</li><li>artifactid：项目名称</li><li>version：版本号</li></ul></li><li><a href="https://mvnrepository.com/">地址</a></li></ul><h3 id="maven-仓库配置"><a href="#maven-仓库配置" class="headerlink" title="maven 仓库配置"></a>maven 仓库配置</h3><ul><li><p>修改 maven 仓库地址，复制一行，修改要存放的位置；在 setting.xml 中修改，下同</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220927211354265.png" alt="image-20220927211354265"></p></li></ul><ul><li><p>修改中央仓库的位置，在 150 行左右</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="idea-创建-maven-项目"><a href="#idea-创建-maven-项目" class="headerlink" title="idea 创建 maven 项目"></a>idea 创建 maven 项目</h3><ul><li><p>新建项目</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220927214334494.png" alt="image-20220927214334494"></p></li></ul><h3 id="maven-项目运行"><a href="#maven-项目运行" class="headerlink" title="maven 项目运行"></a>maven 项目运行</h3><ul><li><p>本地 tomcat</p></li><li><p>maven 内置tomcat （内置的版本是6.0，版本较低，会有兼容性问题）</p><ul><li><p>配置新的 tomcat</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- tomcat版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="9、maven-生命周期和插件"><a href="#9、maven-生命周期和插件" class="headerlink" title="9、maven 生命周期和插件"></a>9、maven 生命周期和插件</h3><ul><li>概述<ul><li>clean：清理</li><li>default：核心阶段<ul><li>编译，测试，打包，部署等</li></ul></li><li>site：产生报告</li></ul></li><li>default：<ul><li>compile<ul><li>编译项目，将资源存储到 target 目录中</li></ul></li><li>test<ul><li>单元测试</li><li>clean -&gt; compile -&gt;test</li></ul></li><li>package<ul><li>对项目进行打包 （配置文件打包成什么方式，这边就是什么格式）</li><li>clean -&gt; compile -&gt;test -&gt;package</li></ul></li><li>install<ul><li>将 jar 或者 war 包安装到本地仓库，此时不同项目也可以使用</li><li>clean -&gt; compile -&gt;test -&gt;package -&gt; install</li></ul></li><li>deploy<ul><li>将 war 或 jar 部署到服务器</li></ul></li></ul></li></ul><h3 id="依赖范围-scope"><a href="#依赖范围-scope" class="headerlink" title="依赖范围 scope"></a>依赖范围 scope</h3><ul><li><p>概述</p></li><li><p>通过 scope 属性来决定 jar 包的范围</p></li><li><p>依赖范围</p><ul><li>主代码：main</li><li>测试打包：test目录可用</li><li>打包：运行时可用</li></ul></li><li><p>scope</p><p>| scope   | 主代码 | 测试代码 | 打包 | 备注                              |<br>| ———- | ——— | ———— | —— | ————————————————- |<br>| compile | ok     | ok       | ok   | 默认值，log4j，dbutils            |<br>| test    |        | ok       |      | junit                             |<br>| provide | ok     | ok       |      | servlet-api                       |<br>| runtime |        | ok       | ok   | mysql（springboot时都是配置文件） |</p></li></ul><h3 id="依赖排除"><a href="#依赖排除" class="headerlink" title="依赖排除"></a>依赖排除</h3><ul><li><p>概述</p><ul><li><p>项目 A 依赖项目 B, 项目 B 依赖项目 C，且 A 不传递依赖 C，此时就需要排除依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">项目A pom.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        xxxx</span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line">项目B pom.xml</span><br><span class="line">xxxx</span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="依赖冲突问题"><a href="#依赖冲突问题" class="headerlink" title="依赖冲突问题"></a>依赖冲突问题</h3><ul><li><p>概述</p><ul><li>依赖传递中，如果依赖了不同版本的相同构件，可能会造成冲突</li></ul></li><li><p>路径优先：路径越短，使用短的那个</p></li><li><p>声明优先：路径相同时，配置靠前的覆盖靠后的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖锁定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="属性properties"><a href="#属性properties" class="headerlink" title="属性properties"></a>属性properties</h3><ul><li><p>概述</p><ul><li>用于在 pom.xml 中进行变量声明</li></ul></li><li><p>代码实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><ul><li><p>语法</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">主版本.次版本.增量版本-里程碑版本</span><br></pre></td></tr></table></figure><ul><li>主版本：有重大功能更新</li><li>次版本：有小幅功能更新，有大BUG修复</li><li>增量版本：有小BUG修复</li><li>里程碑版本：给内部开发人员看的<ul><li>SNAPSHOT : 测试版本</li><li>RELEASE : 正式版本</li></ul></li></ul></li></ul><h3 id="解决构件下载失败"><a href="#解决构件下载失败" class="headerlink" title="解决构件下载失败"></a>解决构件下载失败</h3><ul><li><p>开发步骤</p><ul><li>①将clearLastUpdated.bat插件放入到本地仓库根目录</li><li>②配置clearLastUpdated.bat插件</li></ul></li><li><p>②配置clearLastUpdated.bat插件</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SET</span> CLEAR_PATH=本地仓库所在盘符名称 </span><br><span class="line"><span class="built_in">SET</span> CLEAR_DIR=本地仓库路径</span><br></pre></td></tr></table></figure></li><li><p>bat脚本如下</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cls</span> </span><br><span class="line">@<span class="built_in">ECHO</span> OFF </span><br><span class="line"><span class="built_in">SET</span> CLEAR_PATH=E: </span><br><span class="line"><span class="built_in">SET</span> CLEAR_DIR=E:\maven\repository</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>a </span><br><span class="line"><span class="built_in">TITLE</span> ClearLastUpdated <span class="keyword">For</span> Windows </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br><span class="line">:MENU </span><br><span class="line"><span class="built_in">CLS</span></span><br><span class="line"><span class="built_in">ECHO</span>. </span><br><span class="line"><span class="built_in">ECHO</span>. * * * *  ClearLastUpdated <span class="keyword">For</span> Windows  * * * * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">1</span> 清理*.lastUpdated * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">2</span> 查看*.lastUpdated * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * <span class="number">3</span> 退 出 * </span><br><span class="line"><span class="built_in">ECHO</span>. * * </span><br><span class="line"><span class="built_in">ECHO</span>. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line"><span class="built_in">ECHO</span>. </span><br><span class="line"><span class="built_in">ECHO</span>.请输入选择项目的序号： </span><br><span class="line"><span class="built_in">set</span> /p ID= </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">1</span>&quot; <span class="keyword">GOTO</span> cmd1 </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">2</span>&quot; <span class="keyword">GOTO</span> cmd2 </span><br><span class="line"><span class="keyword">IF</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">3</span>&quot; <span class="keyword">EXIT</span> </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line">:cmd1 </span><br><span class="line"><span class="built_in">ECHO</span>. 开始清理</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CLEAR_DIR%</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.lastUpdated) <span class="keyword">do</span> <span class="built_in">del</span> <span class="variable">%%i</span></span><br><span class="line"><span class="built_in">ECHO</span>.OK</span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br><span class="line">:cmd2 </span><br><span class="line"><span class="built_in">ECHO</span>. 查看*.lastUpdated文件</span><br><span class="line"><span class="variable">%CLEAR_PATH%</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%CLEAR_DIR%</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.lastUpdated) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></span><br><span class="line"><span class="built_in">ECHO</span>.OK </span><br><span class="line"><span class="built_in">PAUSE</span> </span><br><span class="line"><span class="keyword">GOTO</span> MENU </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 搭建博客（五）</title>
      <link href="//post/c4adbb179a32/"/>
      <url>//post/c4adbb179a32/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-搭建小屋（五）"><a href="#hexo-搭建小屋（五）" class="headerlink" title="hexo 搭建小屋（五）"></a>hexo 搭建小屋（五）</h2><h3 id="1-使用-pwa-进行优化"><a href="#1-使用-pwa-进行优化" class="headerlink" title="1. 使用 pwa 进行优化"></a>1. 使用 pwa 进行优化</h3><h4 id="1-生成图标"><a href="#1-生成图标" class="headerlink" title="1. 生成图标"></a>1. 生成图标</h4><ul><li><p>pwa 是啥？<a href="https://blog.csdn.net/weixin_44135121/article/details/105528430">点击查看</a> ；其中的几个优点就是：缓存、通知、后台功能等方面表现更好，因此可以使用 pwa 来提高网站的性能和访问速度</p></li><li><p>首先设计一个符合网站的主题图标，下载需要收费，不过可以截图。建议截图的时候截成正方形</p><div class="tag link"><a class="link-card" title="Brandmark" href="https://app.brandmark.io/v3/"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">Brandmark</p><p class="url">https://app.brandmark.io/v3/</p></div></a></div></li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917161233042.png" alt="image-20220917161233042"></p><ul><li><p>添加元素</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917162135045.png" alt="image-20220917162135045"></p></li></ul><ul><li><p>添加配色方案</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917162223858.png" alt="image-20220917162223858"></p></li></ul><ul><li>挑选一个生成的图标，截图保存到本地</li></ul><ul><li><p>因为我们最终目的是要制作一个全平台的WEB APP，所以对于图标的大小、类型适配显得格外重要。可以访问进行图标制作及<code>manifest</code>的生成</p><div class="tag link"><a class="link-card" title="realfavicongenerator" href="https://realfavicongenerator.net/"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">realfavicongenerator</p><p class="url">https://realfavicongenerator.net/</p></div></a></div></li></ul><ul><li>点击进行选择<img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917162938407.png" alt="image-20220917162938407"></li></ul><ul><li><p>往下滚动，找到下列并进行选择</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917163115018.png" alt="image-20220917163115018"></p></li></ul><ul><li><p>点击图标</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917163226454.png" alt="image-20220917163226454"></p></li></ul><ul><li><p>往下滚动，进行如下操作</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917163719542.png" alt="image-20220917163719542"></p></li></ul><ul><li>然后生成</li></ul><ul><li><p>下载资源包</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220917163825974.png" alt="image-20220917163825974"></p></li></ul><h4 id="2-配置-pwa"><a href="#2-配置-pwa" class="headerlink" title="2. 配置 pwa"></a>2. 配置 pwa</h4><ul><li><p>安装 hexo-offline-popup 插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-offline-popup --save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 _config.yml 中配置文件中，增加以下内容</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-offline-popup.</span></span><br><span class="line"><span class="attr">service_worker:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">3145728</span> <span class="comment"># 缓存的最大文件大小，以字节为单位，此处设置为3MB。</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public/**/*.&#123;js,html,xml,css,png,jpg,gif,svg,webp,eot,ttf,woff,woff2&#125;</span></span><br><span class="line">    <span class="comment"># - public/**/*.&#123;html,xml&#125; #精简版使用这行即可</span></span><br><span class="line">  <span class="comment"># 静态文件合集，如果你的站点使用了例如webp格式的文件，请将文件类型添加进去。。</span></span><br><span class="line">  <span class="comment"># 注意，此处的文件类型就是会缓存下来的所有文件类型，如果不需要缓存那么多，</span></span><br><span class="line">  <span class="comment"># 而只是想判断网页更新与否，缓存html和xml即可。</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="comment"># CDNs - should be cacheFirst, since they should be used specific versions so should not change</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span> <span class="comment"># 如果你需要加载CDN資源，请配置该选项，如果沒有，可以不配置。</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">unpkg.com</span> <span class="comment"># 又拍云</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">cdn.jsdelivr.net</span> <span class="comment"># jsdelivr</span></span><br><span class="line">    <span class="comment"># 更多cdn可自行参照上述格式进行配置。</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>把上面的下载的生成包里面的文件移到对应的目录，比如我上面生成的时候填写的目录是 /img 那现在对应的就是 /source/img 目录</li></ul><ul><li><p>打开图标包中的 site.webmanifest ,修改为 manifest.json ，并将其移到到 /source 下，其中 theme_color 为你自己设计图标的颜色，<strong>必须配置start_url和name的配置项</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;北辰の小屋&quot;</span>,</span><br><span class="line">    <span class="string">&quot;short_name&quot;</span>: <span class="string">&quot;北辰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;theme_color&quot;</span>: <span class="string">&quot;#372804&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background_color&quot;</span>: <span class="string">&quot;#372804&quot;</span>,</span><br><span class="line">    <span class="string">&quot;display&quot;</span>: <span class="string">&quot;standalone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;xiaozhang8.top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start_url&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;icons&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-36x36.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;36x36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-48x48.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;48x48&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-72x72.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;72x72&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-96x96.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;96x96&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-144x144.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;144x144&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-192x192.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;192x192&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-256x256.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;256x256&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-384x384.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;384x384&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/img/android-chrome-512x512.png&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;512x512&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到主题配置文件 _config.butterfly.yml  找到 pwa 配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">manifest:</span> <span class="string">/manifest.json</span></span><br><span class="line">  <span class="attr">theme_color:</span> <span class="string">&#x27;#372804&#x27;</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/img/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span> <span class="string">/img/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span> <span class="string">/img/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">mask_icon:</span> <span class="string">/img/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>三连</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul><ul><li>打开自己的本地博客，然后 f12，找到 Lighthouse，就可以查看咯</li></ul><h3 id="2-使用-gulp-进行压缩"><a href="#2-使用-gulp-进行压缩" class="headerlink" title="2. 使用 gulp 进行压缩"></a>2. 使用 gulp 进行压缩</h3><ul><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global gulp-cli <span class="comment"># 全局安装gulp指令集</span></span><br><span class="line">npm install gulp --save <span class="comment"># 安装gulp插件</span></span><br><span class="line"></span><br><span class="line">npm install gulp-htmlclean --save-dev <span class="comment"># 压缩html</span></span><br><span class="line">npm install gulp-html-minifier-terser --save-dev <span class="comment"># 用gulp-html-minifier-terser可以压缩HTML中的ES6语法</span></span><br><span class="line"></span><br><span class="line">npm install gulp-clean-css --save-dev <span class="comment"># 压缩css</span></span><br><span class="line"></span><br><span class="line">npm install gulp-terser --save-dev</span><br><span class="line"></span><br><span class="line">npm install gulp-fontmin --save-dev <span class="comment"># 压缩ttf格式的字体</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>为 Gulp 创建gulpfile.js任务脚本。在博客根目录根下新建gulpfile.js, 打开gulpfile.js, 输入以下内容：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用到的各个插件</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fontmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-fontmin&#x27;</span>);</span><br><span class="line"><span class="comment">// gulp-tester</span></span><br><span class="line"><span class="keyword">var</span> terser = <span class="built_in">require</span>(<span class="string">&#x27;gulp-terser&#x27;</span>);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">terser</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除html注释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩html</span></span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//省略布尔属性的值，例如：&lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除所有空格作属性值，例如：&lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的 type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>  <span class="comment">//压缩页面URL</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩字体</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minifyFont</span>(<span class="params">text, cb</span>) &#123;</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&#x27;./public/fonts/*.ttf&#x27;</span>) <span class="comment">//原字体所在目录</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">fontmin</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: text</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/fontsdest/&#x27;</span>)) <span class="comment">//压缩后的输出目录</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;mini-font&#x27;</span>, <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.html&#x27;</span>]) <span class="comment">//HTML文件所在目录请根据自身情况修改</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      buffers.<span class="title function_">push</span>(file.<span class="property">contents</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers).<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">      <span class="title function_">minifyFont</span>(text, cb);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 运行gulp命令时依次执行以下任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="string">&#x27;compress&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;mini-font&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>最后执行即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">gulp</span><br><span class="line">hexo server 或 hexo deploy</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 搭建博客（四）</title>
      <link href="//post/7793116f3986/"/>
      <url>//post/7793116f3986/</url>
      
        <content type="html"><![CDATA[<h2 id="四、使用-vercel-，coding，CDN-进行加速（gulp压缩）"><a href="#四、使用-vercel-，coding，CDN-进行加速（gulp压缩）" class="headerlink" title="四、使用 vercel ，coding，CDN  进行加速（gulp压缩）"></a>四、使用 vercel ，coding，CDN  进行加速（gulp压缩）</h2><h3 id="1-使用-vercel-进行加速（暂未完成）"><a href="#1-使用-vercel-进行加速（暂未完成）" class="headerlink" title="1.使用 vercel 进行加速（暂未完成）"></a>1.使用 vercel 进行加速（暂未完成）</h3><ul><li><p>访问并登录<a href="https://vercel.com/">vercel</a>官网, 使用github登陆</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911165529288.png" alt="image-20220911165529288"></p></li></ul><ul><li><p>把自己的项目进行导入</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911165635983.png" alt="image-20220911165635983"></p></li></ul><ul><li><p>点击部署即可</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911165736615.png" alt="image-20220911165736615"></p></li></ul><ul><li><p>部署成功显示</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911165950481.png" alt="image-20220911165950481"></p></li></ul><ul><li>不知道啥原因无法访问，暂时不弄这个加速，用 coding 加速, 好像被墙了</li></ul><h3 id="2-使用coding进行加速"><a href="#2-使用coding进行加速" class="headerlink" title="2. 使用coding进行加速"></a>2. 使用coding进行加速</h3><ul><li><p>我们打开<a href="https://coding.net/">Coding的官网</a>，没有账号就进行注册</p></li><li><p>进入后，然后找到全部项目</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911172753652.png" alt="image-20220911172753652"></p></li></ul><ul><li><p>选择左边的来进行创建</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911173148277.png" alt="image-20220911173148277"></p></li></ul><ul><li><p>项目名称和用户名保持一致</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911173404564.png" alt="image-20220911173404564"></p></li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911173441194.png" alt="image-20220911173441194"></p><ul><li><p>创建代码仓库，并初始化</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911173626268.png" alt="image-20220911173626268"></p></li></ul><ul><li><p>仓库名称与用户名保持一致，且公开代码仓库</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911173831829.png" alt="image-20220911173831829"></p></li></ul><ul><li><p>复制https地址</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911173956500.png" alt="image-20220911173956500"></p></li></ul><ul><li><p>使用快速初始化仓库</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911174106939.png" alt="image-20220911174106939"></p></li></ul><ul><li><p>打开项目，找到 _config.yml，将 coding的ssh配置到里面</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">coding:</span> <span class="string">&#x27;https://e.coding.net/xiaozhang8/960551423/960551423.git&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后执行下面命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>执行的时候应该会弹出来，需要登录，此时使用 coding 账号登录即可，然后上传成功</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911184835165.png" alt="image-20220911184835165"></p></li></ul><ul><li><p>进入<a href="https://cloud.tencent.com/">腾讯云</a>，找到以下内容，然后新建应用</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911185448973.png" alt="image-20220911185448973"></p></li></ul><ul><li><p>部署静态网站</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911185646316.png" alt="image-20220911185646316"></p></li></ul><ul><li><p>应用名自己随意</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911185821023.png" alt="image-20220911185821023"></p></li></ul><ul><li><p>第一次会部署失败，因为没配置部署环境，如果灰色，刷新一下就好</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911190054452.png" alt="image-20220911190054452"></p></li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911190200499.png" alt="image-20220911190200499"></p><ul><li><p>部署成功会在资源列表有显示</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220911190406129.png" alt="image-20220911190406129"></p></li></ul><ul><li>到此 coding 部署完成</li></ul><h3 id="3-使用-CDN-进行加速"><a href="#3-使用-CDN-进行加速" class="headerlink" title="3. 使用 CDN 进行加速"></a>3. 使用 CDN 进行加速</h3><ul><li><p>去 <a href="https://www.upyun.com/league">又拍云联盟</a> 可免费申请CDN，但是要把它们网站logo挂到自己网站下</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912110256841.png" alt="image-20220912110256841"></p></li></ul><ul><li><p>申请成功后，创建 CDN 就好</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912110650861.png" alt="image-20220912110650861"></p></li></ul><ul><li><p>来到腾讯云，找到对象存储</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912111055971.png" alt="image-20220912111055971"></p></li></ul><ul><li><p>来到 存储桶列表，找到进入下面这个 存储桶（因人而异）</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912111317644.png" alt="image-20220912111317644"></p></li></ul><ul><li><p>找到下面这些，添加域名 就好了</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912111552066.png" alt="image-20220912111552066"></p></li></ul><ul><li><p>将静态网站域名复制，后面要使用</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912111718960.png" alt="image-20220912111718960"></p></li></ul><ul><li><p>把刚复制的域名添加到 又拍云 下面，记得去掉前缀（https://）</p><p><img src="https://cdn.jsdelivr.net/gh/960551423z/PicGo/img/image-20220912111827698.png" alt="image-20220912111827698"></p></li></ul><ul><li>同理，把 github 也添加进去，就是你的网站，去掉前缀</li></ul><ul><li>创建成功后，把上面复制的地址放到 回源host 中</li></ul><ul><li>然后开启自己需要的就好</li></ul><ul><li>域名没备案，后面完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 搭建博客（一）</title>
      <link href="//post/0cdfccbd9244/"/>
      <url>//post/0cdfccbd9244/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建博客准备的环境-（使用-hexo-进行搭建）"><a href="#一、搭建博客准备的环境-（使用-hexo-进行搭建）" class="headerlink" title="一、搭建博客准备的环境 （使用 hexo 进行搭建）"></a>一、搭建博客准备的环境 （使用 hexo 进行搭建）</h2><h4 id="1-node-js-安装"><a href="#1-node-js-安装" class="headerlink" title="1. node.js 安装"></a>1. node.js 安装</h4><ul><li>推荐教程 <a href="https://blog.csdn.net/qq_48485223/article/details/122709354">https://blog.csdn.net/qq_48485223/article/details/122709354</a><ul><li>下载的网站：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li></ul></li></ul><h4 id="2-编译器的安装"><a href="#2-编译器的安装" class="headerlink" title="2. 编译器的安装"></a>2. 编译器的安装</h4><ul><li><p>可以使用 vscode 和 webstorm 来进行代码修改，以及后面的修改教程</p><ul><li><p>vscode下载网站：<a href="https://code.visualstudio.com/Download#">https://code.visualstudio.com/Download#</a></p><ul><li>vscode下载比较慢，加速教程：<a href="https://blog.csdn.net/zibingdechengbao/article/details/124867039">https://blog.csdn.net/zibingdechengbao/article/details/124867039</a></li></ul></li></ul></li></ul><ul><li>webstorm下载地址：<a href="https://www.jetbrains.com/webstorm/download/other.html">https://www.jetbrains.com/webstorm/download/other.html</a></li></ul><ul><li>注意的是，webstorm 只能免费试用 30 天，若想长久使用，则可以百度找到解决方法，或者去某宝寻找</li></ul><h4 id="3-git-安装"><a href="#3-git-安装" class="headerlink" title="3. git 安装"></a>3. git 安装</h4><ul><li><p>推荐教程：<a href="https://blog.csdn.net/mukes/article/details/115693833">https://blog.csdn.net/mukes/article/details/115693833</a></p><ul><li>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul></li></ul><h4 id="4-typora-软件"><a href="#4-typora-软件" class="headerlink" title="4. typora 软件"></a>4. typora 软件</h4><ul><li><p>上传笔记时需要 md 格式，因此安装 typora</p><ul><li>百度网盘：链接：<a href="https://pan.baidu.com/s/1apGul43cwwxroTVAfQp1rA?pwd=xn40">https://pan.baidu.com/s/1apGul43cwwxroTVAfQp1rA?pwd=xn40</a> 提取码：xn40 </li><li>阿里网盘：<a href="https://www.aliyundrive.com/s/iBkWA5aXniX">https://www.aliyundrive.com/s/iBkWA5aXniX</a> 提取码: oa86 </li></ul></li><li><p>基本使用的教程：<a href="https://blog.csdn.net/dc_12138/article/details/124263439">https://blog.csdn.net/dc_12138/article/details/124263439</a></p></li></ul><h4 id="5-Watt-Toolkit（原名：Steam-）"><a href="#5-Watt-Toolkit（原名：Steam-）" class="headerlink" title="5. Watt Toolkit（原名：Steam++ ）"></a>5. Watt Toolkit（原名：Steam++ ）</h4><ul><li>因为使用的是 github 进行搭建，使用有时候需要访问 github，但是网站在国外，因此访问较慢，所以使用 steam++ 加速<ul><li>下载地址：<a href="https://steampp.net/download">https://steampp.net/download</a></li></ul></li><li>或者直接挂东西(11一年，便宜): <ul><li>邀请码：<a href="https://xn--4gq62f52gdss.com/#/register?code=pDfHd2UT">点击跳转</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 搭建博客（三）</title>
      <link href="//post/924c254fc7db/"/>
      <url>//post/924c254fc7db/</url>
      
        <content type="html"><![CDATA[<h2 id="三、对-butterfly-进行魔改"><a href="#三、对-butterfly-进行魔改" class="headerlink" title="三、对 butterfly 进行魔改"></a>三、对 butterfly 进行魔改</h2><h4 id="1-底部音乐播放"><a href="#1-底部音乐播放" class="headerlink" title="1. 底部音乐播放"></a>1. 底部音乐播放</h4><ul><li><p>安装播放的插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 _config.yml 添加如下配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>开启主题配置文件 aplayerInject</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 _config.butterfly.yml 中找到一下配置并进行添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;7500478628&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">data-lrcType=&quot;-1&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：注意歌单中不能包括 vip 音乐</span></span><br><span class="line"><span class="comment">#data-id：表示id号，如下图</span></span><br><span class="line"><span class="comment">#data-server：表示哪个平台，netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）</span></span><br><span class="line"><span class="comment">#   data-type：song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</span></span><br><span class="line"><span class="comment">#   data-lrcType：-1表示显示歌词</span></span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220906172849315.png" alt="image-20220906172849315"></p><h4 id="2-添加小人"><a href="#2-添加小人" class="headerlink" title="2. 添加小人"></a>2. 添加小人</h4><ul><li><p>添加小人，在 <code>node_modules\hexo-theme-butterfly\layout\includes\widget\card_announcement.pug</code> 下添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="string">.xpand(style=&#x27;height:200px;&#x27;)</span></span><br><span class="line">  <span class="string">canvas.illo(width=&#x27;800&#x27;</span> <span class="string">height=&#x27;800&#x27;</span> <span class="string">style=&#x27;max-width:</span> <span class="string">200px;</span> <span class="attr">max-height:</span> <span class="string">200px;</span> <span class="attr">touch-action:</span> <span class="string">none;</span> <span class="attr">width:</span> <span class="string">640px;</span> <span class="attr">height:</span> <span class="string">640px;&#x27;)</span></span><br><span class="line"><span class="string">script(src=&#x27;https://fastly.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople1.js&#x27;)</span></span><br><span class="line"><span class="string">script(src=&#x27;https://fastly.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/zdog.dist.js&#x27;)</span></span><br><span class="line"><span class="string">script#rendered-js(src=&#x27;https://fastly.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople.js&#x27;)</span></span><br><span class="line"><span class="string">style.</span></span><br><span class="line">  <span class="string">.card-widget.card-announcement</span> &#123;</span><br><span class="line">  <span class="attr">margin:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="attr">align-items:</span> <span class="string">center;</span></span><br><span class="line">  <span class="attr">justify-content:</span> <span class="string">center;</span></span><br><span class="line">  <span class="attr">text-align:</span> <span class="string">center;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">canvas</span> &#123;</span><br><span class="line">  <span class="attr">display:</span> <span class="string">block;</span></span><br><span class="line">  <span class="attr">margin:</span> <span class="number">0</span> <span class="string">auto;</span></span><br><span class="line">  <span class="attr">cursor:</span> <span class="string">move;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 注意添加的位置，注意层级问题</span></span><br></pre></td></tr></table></figure><p>​    <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220906173810069.png" alt="image-20220906173810069"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220906174000110.png" alt="image-20220906174000110"></p></li></ul><h4 id="3-修改加载动画"><a href="#3-修改加载动画" class="headerlink" title="3. 修改加载动画"></a>3. 修改加载动画</h4><ul><li><p>默认的加载动画</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220906174519591.png" alt="image-20220906174519591"></p></li></ul><ul><li><p>因为太难看，所以进行修改；在 node_modules\hexo-theme-butterfly\layout\includes\loading\ 目录下创建一个名为loaded.ejs的文件，并将如下内容写入该文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">preloader</span>.<span class="property">enable</span>) &#123; %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;loader&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;% if(theme.preloader.layout == &#x27;gear&#x27; ) &#123;%&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer_box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_overlay&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs__top&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_hole&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs__left&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_hole&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs__bottom&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_hole&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;% &#125; else if(theme.preloader.layout == &#x27;spinner-box&#x27;) &#123; %&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-left-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-right-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-border-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-core&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-border-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-core&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-word&quot;</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> endLoading = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loader&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;loading&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,endLoading);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到主题配置文件_config.butterfly.yml，在inject的head处引入如下两个css文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@latest/hexo/css/loading_style_1.css&quot;</span> <span class="string">&gt;</span> <span class="comment"># spinner-box风格样式文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@latest/hexo/css/loading_style_2.css&quot;</span> <span class="string">&gt;</span> <span class="comment"># gear风格样式文件</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在\themes\butterfly\layout\includes目录下，找到layout.pug文件，将代码（或释掉）：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">if</span> <span class="string">theme.preloader</span></span><br><span class="line">      <span class="type">!=partial(&#x27;includes/loading/loaded.ejs&#x27;,</span> &#123;&#125;<span class="string">,</span> &#123;<span class="string">cache:true</span>&#125;<span class="string">)</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220906175102258.png" alt="image-20220906175102258"></p></li></ul><ul><li><p>找到主题配置文件_config.butterfly.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">preloader:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line"></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">gear</span> <span class="comment"># gear, spinner-box 两种样式可选</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-自定义渐变背景"><a href="#4-自定义渐变背景" class="headerlink" title="4. 自定义渐变背景"></a>4. 自定义渐变背景</h4><ul><li><p>在 source 目录下新建一个 css目录</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220906175528938.png" alt="image-20220906175528938"></p></li></ul><ul><li><p>在 <em>_config.butterfly.yml</em> 下找到 inject 进行添加以下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/mycss.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到 background 添加为</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&quot;#efefef&quot;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>添加 css 样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景渐变 */</span></span><br><span class="line"><span class="selector-id">#web_bg</span>&#123;</span><br><span class="line">    <span class="comment">/*紫粉渐变*/</span></span><br><span class="line">    <span class="comment">/*background-image: linear-gradient(120deg, #e0c3fc 0%, #8ec5fc 100%);*/</span></span><br><span class="line">    <span class="comment">/*粉白蓝*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(-<span class="number">225deg</span>, <span class="number">#dfbacd</span> <span class="number">0%</span>, <span class="number">#B8DCFF</span> <span class="number">48%</span>, <span class="number">#58abf3</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚footer */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="comment">/* 与背景渐变效果一致*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(-<span class="number">225deg</span>, <span class="number">#d6badf</span> <span class="number">0%</span>, <span class="number">#B8DCFF</span> <span class="number">28%</span>, <span class="number">#58abf3</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">        <span class="number">45deg</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">25%</span>,</span><br><span class="line">        transparent <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">        transparent <span class="number">75%</span>,</span><br><span class="line">        transparent</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-页面标签的-title-显示"><a href="#5-页面标签的-title-显示" class="headerlink" title="5. 页面标签的 title 显示"></a>5. 页面标签的 title 显示</h4><ul><li><p>不在当前页面显示效果如下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220907080352654.png" alt="image-20220907080352654"></p></li></ul><ul><li><p>切换为本页面显示效果如下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220907080455492.png" alt="image-20220907080455492"></p></li></ul><ul><li><p>在 node_modules\hexo-theme-butterfly\source\js 文件夹下添加 crash_cheat.js 文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 换掉 document.title 的内容即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitle</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/joke.ico&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;( ๑ŏ ﹏ ŏ๑ ) 不要走~&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/favicon.ico&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27; ( ๑•̀ㅂ•́) ✧ 欢迎回家~&#x27;</span>;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitle</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 node_modules\hexo-theme-butterfly\layout\includes\layout.pug 中添加以下代码来引入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">script</span>(type=<span class="string">&#x27;text/javascript&#x27;</span>, src=<span class="string">&#x27;/js/crash_cheat.js&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在<code>inject:</code> -&gt; <code>bottom:</code> 引入以下文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/weilain/cdn-photo/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-双栏布局插件"><a href="#6-双栏布局插件" class="headerlink" title="6. 双栏布局插件"></a>6. 双栏布局插件</h4><ul><li><p>效果图</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220908080527653.png" alt="image-20220908080527653"></p></li></ul><ul><li><p>首先安装插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-magnet --save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>新增根目录 _config.yaml 配置项，注意此时的 name 为你分类的名字</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">magnet:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line">  <span class="attr">devide:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">教程</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の魔改教程</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">📚</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">游戏评测</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の游戏评测</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">🎮</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生活趣闻</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の生活趣闻</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">🐱‍👓</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vue</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の编程学习</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">👩‍💻</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">学习</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の读书笔记</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">📒</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">随想</span></span><br><span class="line">      <span class="attr">display_name:</span> <span class="string">小冰の胡思乱想</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">💡</span></span><br><span class="line">  <span class="attr">color_setting:</span></span><br><span class="line">    <span class="attr">text_color:</span> <span class="string">black</span></span><br><span class="line">    <span class="attr">text_hover_color:</span> <span class="string">white</span></span><br><span class="line">    <span class="attr">background_color:</span> <span class="string">&quot;#f2f2f2&quot;</span></span><br><span class="line">    <span class="attr">background_hover_color:</span> <span class="string">&quot;#b30070&quot;</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height: auto&quot;&gt;&lt;div id=&quot;catalog_magnet&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 字段的解释：</span></span><br><span class="line"><span class="comment"># enable：是否开启插件（true/false）</span></span><br><span class="line"><span class="comment">#enable_page：路由地址（即这个双栏放在哪个页面）</span></span><br><span class="line"><span class="comment">#priority：插件的叠放顺序，数字越大，叠放约靠前</span></span><br><span class="line"><span class="comment">#type：选择筛选分类还是标签（categories/tags）</span></span><br><span class="line"><span class="comment">#devide：表示分隔的列数，2 表示分为两列展示</span></span><br><span class="line"><span class="comment">#color_setting： 颜色配置</span></span><br><span class="line"><span class="comment"># layout：</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-文章置顶插件"><a href="#7-文章置顶插件" class="headerlink" title="7.  文章置顶插件"></a>7.  文章置顶插件</h4><ul><li><p>效果如下</p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220908160554500.png" alt="image-20220908160554500"></p></li></ul><ul><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-swiper-bar --save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>新增配置项，在 _config.yml 里面进行添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id=&quot;swiper_container&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在写的文档表头上添加一下参数</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 数字越大越靠前</span></span><br><span class="line">swiper<span class="emphasis">_index: 8</span></span><br><span class="line"><span class="emphasis">swiper_</span>desc: 简单好用的 hexo 博客文章置顶插件！</span><br><span class="line">swiper<span class="emphasis">_cover: /images/letter/p.png</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220908162306104.png" alt="image-20220908162306104"></p></li></ul><h4 id="8-底部评论展示"><a href="#8-底部评论展示" class="headerlink" title="8. 底部评论展示"></a>8. 底部评论展示</h4><ul><li><p>使用  twikoo </p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220908164911615.png" alt="image-20220908164911615"></p></li></ul><ul><li><p>根据文档来</p><blockquote><p>文档链接地址： <a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220908165433176.png" alt="image-20220908165433176"></p></blockquote></li><li><p>打开相关的配置，在 _config.butterfly.yml 文件中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Comments System</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Twikoo</span> <span class="comment"># Valine,Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in Home Page</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># use 代表使用那个评论系统</span></span><br><span class="line"><span class="comment"># text 表示是否展示使用的评论系统厂家</span></span><br><span class="line"><span class="comment"># lazyload 是否开启懒加载</span></span><br><span class="line"><span class="comment"># count 是否显示评论数</span></span><br><span class="line"><span class="comment"># card_post_count 表示是否在主页显示评论数</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>配置完成</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220908172710689.png" alt="image-20220908172710689"></p></li></ul><h4 id="9-顶部状态栏居中"><a href="#9-顶部状态栏居中" class="headerlink" title="9. 顶部状态栏居中"></a>9. 顶部状态栏居中</h4><ul><li><p>找到 node_modules\hexo-theme-butterfly\layout\includes\header\nav.pug 修改为以下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">nav#nav</span></span><br><span class="line">  <span class="string">span#blog_name</span></span><br><span class="line">    <span class="string">a#site-name(href=url_for(&#x27;/&#x27;))</span> <span class="comment">#[=config.title]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#menus</span></span><br><span class="line">  <span class="type">!=partial(&#x27;includes/header/menu_item&#x27;,</span> &#123;&#125;<span class="string">,</span> &#123;<span class="attr">cache:</span> <span class="literal">true</span>&#125;<span class="string">)</span></span><br><span class="line">  <span class="comment">#nav-right</span></span><br><span class="line">      <span class="string">if</span> <span class="string">(theme.algolia_search.enable</span> <span class="string">||</span> <span class="string">theme.local_search.enable)</span></span><br><span class="line">        <span class="comment">#search-button</span></span><br><span class="line">          <span class="string">a.site-page.social-icon.search</span></span><br><span class="line">            <span class="string">i.fas.fa-search.fa-fw</span></span><br><span class="line">          <span class="comment">#toggle-menu</span></span><br><span class="line">            <span class="string">a.site-page</span></span><br><span class="line">              <span class="string">i.fas.fa-bars.fa-fw</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编写 css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 导航栏居中 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#archive</span>,<span class="selector-id">#page</span>,<span class="selector-id">#category</span>,<span class="selector-id">#tag</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.left_radius</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*圆角修改*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.right_radius</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*圆角修改*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.recent-post-item</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:auto <span class="meta">!important</span>;<span class="comment">/*容器高度自动*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-info</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span>;<span class="comment">/*容器内部文字左右间距*/</span></span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">1em</span>;<span class="comment">/*容器内部文字上间距*/</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span><span class="meta">!important</span>;<span class="comment">/*容器宽度*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt; <span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-title</span> &#123;</span><br><span class="line">        -webkit-line-clamp: <span class="number">1</span>;<span class="comment">/*控制标题的行数*/</span></span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0.3rem</span>; <span class="comment">/*控制标题的上间距*/</span></span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">0.3rem</span>;<span class="comment">/*控制标题的下间距*/</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color);</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.2em</span>; <span class="comment">/*控制标题的字体大小*/</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.4</span>;<span class="comment">/*控制标题的行高*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &gt;<span class="selector-class">.recent-post-info</span> &gt; <span class="selector-class">.article-meta-wrap</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;<span class="comment">/*控制标题meta信息的底部间距*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>:nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去掉导航栏下面的 蓝色 长条 */</span></span><br><span class="line"><span class="selector-id">#nav</span> *<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 二级导航栏横向 */</span></span><br><span class="line"><span class="selector-class">.menus_item_child</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#sidebar-menus</span> <span class="selector-tag">li</span>)&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menus_item_child</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#sidebar-menus</span> <span class="selector-tag">ul</span>)&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="built_in">calc</span>(-<span class="number">150%</span>)<span class="meta">!important</span>;<span class="comment">/*这是估算值，为了保持元素居中的，如果不合适可以自己调*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 顶端常驻 */</span></span><br><span class="line"><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>)<span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>)<span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>)<span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>)<span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>)<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: none<span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: none<span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: none<span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: none<span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: none<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">9</span>,<span class="number">24</span>,<span class="number">41</span>,<span class="number">0.8</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">9</span>,<span class="number">24</span>,<span class="number">41</span>,<span class="number">0.8</span>) ; <span class="comment">/* 根据自己的颜色来 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-引入阿里-icon-图标"><a href="#10-引入阿里-icon-图标" class="headerlink" title="10. 引入阿里 icon 图标"></a>10. 引入阿里 icon 图标</h4><ul><li><p>加入图标</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220909143422785.png" alt="image-20220909143422785"></p></li></ul><ul><li><p>若想用彩色图标，则选择下面这种方式引入，并点击复制代码，即蓝字部分</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220909143550400.png" alt="image-20220909143550400"></p></li></ul><ul><li><p>在配置文件中引入，即在 _config,butterfly.yml 中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;//at.alicdn.com/t/c/font_3639442_rdlcotnycbi.js&quot;&gt;&lt;/script&gt;</span> <span class="comment"># 阿里图标库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到这个文件 node_modules/hexo-theme-butterfly/layout/includes/header/social.pug  将里面的内容替换</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">each</span> <span class="string">url,</span> <span class="string">icon</span> <span class="string">in</span> <span class="string">theme.social</span></span><br><span class="line">  <span class="string">a.social-icon(href=url_for(trim(url.split(&#x27;||&#x27;)[0]))</span> <span class="string">target=&quot;_blank&quot;</span></span><br><span class="line">  <span class="string">title=url.split(&#x27;||&#x27;)[1]</span> <span class="string">===</span> <span class="string">undefined</span> <span class="string">?</span> <span class="string">&#x27;&#x27;</span> <span class="string">:</span> <span class="string">trim(url.split(&#x27;||&#x27;)[1]))</span></span><br><span class="line">    <span class="string">svg(class=&quot;icon&quot;</span> <span class="string">aria-hidden=&quot;true&quot;)</span></span><br><span class="line">      <span class="string">use(xlink:href=&#x27;#&#x27;</span> <span class="string">+</span> <span class="string">icon)</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>搜索找到以下内容</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220912150946525.png" alt="image-20220912150946525"></p></li></ul><ul><li><p>去阿里矢量图标库，找到对应的图标，复制进去即可</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220912151256391.png" alt="image-20220912151256391"></p></li></ul><ul><li><p>在创建的css中加入以下内容</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 阿里图标 */</span></span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">    fill: currentColor;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>效果图如下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220909144054580.png" alt="image-20220909144054580"></p></li></ul><h4 id="11-为文章添加图片"><a href="#11-为文章添加图片" class="headerlink" title="11. 为文章添加图片"></a>11. 为文章添加图片</h4><ul><li><p>效果如下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220910084229479.png" alt="image-20220910084229479"></p></li></ul><ul><li><p>那如何进行添加呢，只需要在文章的表头上添加 cover 属性，并加上图片地址，如下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220910084417095.png" alt="image-20220910084417095"></p></li></ul><ul><li><p>此时需要给每个文章添加，是不是觉得很麻烦，此时就可以在 _config.butterfly.yml 中，找到以下配置</p><blockquote><p>在 default_cover 中添加多张图片，后面不给文章添加 cover 属性，文章默认从多张图片中挑选一张</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page (封面顯示的位置)</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="comment"># - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="12-底部的开源框修改"><a href="#12-底部的开源框修改" class="headerlink" title="12. 底部的开源框修改"></a>12. 底部的开源框修改</h4><ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220912095228031.png" alt="image-20220912095228031"></li></ul><ul><li><p>找到 \node_modules\hexo-theme-butterfly\layout\includes\post\post-copyright.pug 并替换为以下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">if</span> <span class="string">theme.post_copyright.enable</span> <span class="string">&amp;&amp;</span> <span class="string">page.copyright</span> <span class="type">!==</span> <span class="literal">false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">let</span> <span class="string">author</span> <span class="string">=</span> <span class="string">page.copyright_author</span> <span class="string">?</span> <span class="attr">page.copyright_author :</span> <span class="string">config.author</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">let</span> <span class="string">url</span> <span class="string">=</span> <span class="string">page.copyright_url</span> <span class="string">?</span> <span class="attr">page.copyright_url :</span> <span class="string">page.permalink</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">let</span> <span class="string">license</span> <span class="string">=</span> <span class="string">page.license</span> <span class="string">?</span> <span class="attr">page.license :</span> <span class="string">theme.post_copyright.license</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">let</span> <span class="string">license_url</span> <span class="string">=</span> <span class="string">page.license_url</span> <span class="string">?</span> <span class="attr">page.license_url :</span> <span class="string">theme.post_copyright.license_url</span></span><br><span class="line">  <span class="string">.post-copyright</span></span><br><span class="line">    <span class="string">.post-copyright__title</span></span><br><span class="line">      <span class="string">span.post-copyright-info</span></span><br><span class="line">        <span class="string">h</span> <span class="comment">#[=page.title]</span></span><br><span class="line">    <span class="string">.post-copyright__type</span></span><br><span class="line">      <span class="string">span.post-copyright-info</span></span><br><span class="line">        <span class="string">a(href=url_for(url))=</span> <span class="string">theme.post_copyright.decode</span> <span class="string">?</span> <span class="string">decodeURI(url)</span> <span class="string">:</span> <span class="string">url</span></span><br><span class="line">    <span class="string">.post-copyright-m</span></span><br><span class="line">      <span class="string">.post-copyright-m-info</span></span><br><span class="line">        <span class="string">.post-copyright-a</span></span><br><span class="line">            <span class="string">h</span> <span class="string">作者</span></span><br><span class="line">            <span class="string">.post-copyright-cc-info</span></span><br><span class="line">                <span class="string">h=author</span></span><br><span class="line">        <span class="string">.post-copyright-c</span></span><br><span class="line">            <span class="string">h</span> <span class="string">发布于</span></span><br><span class="line">            <span class="string">.post-copyright-cc-info</span></span><br><span class="line">                <span class="string">h=date(page.date,</span> <span class="string">config.date_format)</span></span><br><span class="line">        <span class="string">.post-copyright-u</span></span><br><span class="line">            <span class="string">h</span> <span class="string">更新于</span></span><br><span class="line">            <span class="string">.post-copyright-cc-info</span></span><br><span class="line">                <span class="string">h=date(page.updated,</span> <span class="string">config.date_format)</span></span><br><span class="line">        <span class="string">.post-copyright-c</span></span><br><span class="line">            <span class="string">h</span> <span class="string">许可协议</span></span><br><span class="line">            <span class="string">.post-copyright-cc-info</span></span><br><span class="line">                <span class="string">a.icon(rel=&#x27;noopener&#x27;</span> <span class="string">target=&#x27;_blank&#x27;</span> <span class="string">title=&#x27;Creative</span> <span class="string">Commons&#x27;</span> <span class="string">href=&#x27;https://creativecommons.org/&#x27;)</span></span><br><span class="line">                  <span class="string">i.fab.fa-creative-commons</span></span><br><span class="line">                <span class="string">a(rel=&#x27;noopener&#x27;</span> <span class="string">target=&#x27;_blank&#x27;</span> <span class="string">title=license</span> <span class="string">href=url_for(license_url))=license</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到 \blog\node_modules\hexo-theme-butterfly\source\css_layout\post.styl 替换为以下内容</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beautify</span><span class="params">()</span></span></span><br><span class="line">  <span class="built_in">headStyle</span>(fontsize)</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="built_in">unit</span>(fontsize + <span class="number">12</span>, <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="built_in">unit</span>((<span class="built_in">-</span>(fontsize + <span class="number">6</span>)), <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="built_in">unit</span>(fontsize, <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="built_in">unit</span>(fontsize + <span class="number">18</span>, <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span>,</span><br><span class="line">  <span class="selector-tag">h2</span>,</span><br><span class="line">  <span class="selector-tag">h3</span>,</span><br><span class="line">  <span class="selector-tag">h4</span>,</span><br><span class="line">  <span class="selector-tag">h5</span>,</span><br><span class="line">  <span class="selector-tag">h6</span></span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">7px</span>)</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$title</span>-prefix-icon-color</span><br><span class="line">      <span class="attribute">content</span>: <span class="variable">$title</span>-prefix-icon</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">1</span></span><br><span class="line">      <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out</span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h2</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h3</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h4</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h5</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h6</span></span><br><span class="line">    <span class="built_in">headStyle</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ol</span>,</span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="selector-tag">p</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span></span><br><span class="line">    <span class="selector-pseudo">&amp;::marker</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.05em</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-pseudo">&amp;::marker</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--pseudo-hover)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span></span><br><span class="line">    <span class="attribute">list-style-type</span>: circle</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">  <span class="attribute">overflow-wrap</span>: break-word</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$theme</span>-link-color</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">text-decoration</span>: underline</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span></span><br><span class="line">    <span class="attribute">display</span>: block</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span></span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">p</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">iframe</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;anchor&#x27;</span>)</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.headerlink</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line">        <span class="attribute">float</span>: right</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--headline-presudo)</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;\f0c1&#x27;</span></span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">95em</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">3s</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--pseudo-hover)</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">h1</span>,</span><br><span class="line">    <span class="selector-tag">h2</span>,</span><br><span class="line">    <span class="selector-tag">h3</span>,</span><br><span class="line">    <span class="selector-tag">h4</span>,</span><br><span class="line">    <span class="selector-tag">h5</span>,</span><br><span class="line">    <span class="selector-tag">h6</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-class">.headerlink</span></span><br><span class="line">          <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ol</span>,</span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="selector-tag">ol</span>,</span><br><span class="line">    <span class="selector-tag">ul</span></span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.enable&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.field&#x27;</span>) == <span class="string">&#x27;site&#x27;</span></span><br><span class="line">      <span class="built_in">beautify</span>()</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;beautify.field&#x27;</span>) == <span class="string">&#x27;post&#x27;</span></span><br><span class="line">      &amp;<span class="selector-class">.post-content</span></span><br><span class="line">        <span class="built_in">beautify</span>()</span><br><span class="line"></span><br><span class="line">  &gt; <span class="selector-pseudo">:last-child</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span> <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.tag_share</span></span><br><span class="line">    <span class="selector-class">.post-meta</span></span><br><span class="line">      &amp;__tag-list</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line"></span><br><span class="line">      &amp;__tags</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">12px</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="variable">$light</span>-blue</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--white)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post_share</span></span><br><span class="line">      <span class="attribute">display</span>: inline-block</span><br><span class="line">      <span class="attribute">float</span>: right</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">width</span>: fit-content</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.social-share</span></span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.social-share-icon</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line">          <span class="attribute">width</span>: w = <span class="number">1.85em</span></span><br><span class="line">          <span class="attribute">height</span>: w</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">1.2em</span></span><br><span class="line">          <span class="attribute">line-height</span>: w</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">10px</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--light-grey)</span><br><span class="line">    <span class="attribute">transition</span>: box-shadow .<span class="number">3s</span> ease-in-out</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span><span class="meta">!important</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">239</span> <span class="number">241</span> <span class="number">243</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--heo-post-blockquote-bg)</span><br><span class="line">      <span class="attribute">position</span> absolute</span><br><span class="line">      <span class="attribute">right</span> -<span class="number">26px</span></span><br><span class="line">      <span class="attribute">top</span> -<span class="number">120px</span></span><br><span class="line">      <span class="attribute">content</span> <span class="string">&#x27;\f25e&#x27;</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">200px</span></span><br><span class="line">      <span class="attribute">font-family</span> <span class="string">&#x27;Font Awesome 5 Brands&#x27;</span></span><br><span class="line">      <span class="attribute">opacity</span> .<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">6</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-copyright</span></span><br><span class="line">      &amp;-meta</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-weight</span>: bold</span><br><span class="line"></span><br><span class="line">      &amp;-info</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">6px</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">text-decoration</span>: none</span><br><span class="line">          <span class="attribute">word-break</span>: break-word</span><br><span class="line"></span><br><span class="line">          <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">            <span class="attribute">text-decoration</span>: none</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-copyright-cc-info</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$theme</span>-color;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-outdate-notice</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1.2em</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$noticeOutdate</span>-bg</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$noticeOutdate</span>-color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;noticeOutdate.style&#x27;</span>) == <span class="string">&#x27;flat&#x27;</span></span><br><span class="line">      <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">5em</span> <span class="number">2.6em</span></span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="variable">$noticeOutdate</span>-border</span><br><span class="line"></span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.fontawesomeIcon</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span></span><br><span class="line">        <span class="attribute">left</span>: .<span class="number">9em</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$noticeOutdate</span>-border</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;\f071&#x27;</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.ads-wrap</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span></span><br><span class="line"><span class="selector-class">.post-copyright-m-info</span></span><br><span class="line">  <span class="selector-class">.post-copyright-a</span>,</span><br><span class="line">  <span class="selector-class">.post-copyright-c</span>,</span><br><span class="line">  <span class="selector-class">.post-copyright-u</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">width</span> fit-content</span><br><span class="line">    <span class="attribute">padding</span> <span class="number">2px</span> <span class="number">5px</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="selector-id">#post</span></span><br><span class="line">    <span class="selector-class">.post-copyright</span></span><br><span class="line">      <span class="attribute">background-color</span> <span class="number">#07080a</span></span><br><span class="line">      <span class="attribute">text-shadow</span> <span class="number">#bfbeb8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">      <span class="attribute">border</span> <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">19</span> <span class="number">18</span> <span class="number">18</span> / <span class="number">35%</span>)</span><br><span class="line">      <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">120</span>, <span class="number">210</span>)</span><br><span class="line">      <span class="attribute">animation</span> flashlight <span class="number">1s</span> linear infinite alternate</span><br><span class="line">  <span class="selector-class">.post-copyright-info</span></span><br><span class="line">    <span class="attribute">color</span> <span class="number">#e0e0e4</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.post-copyright__title</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">22px</span></span><br><span class="line">  <span class="selector-class">.post-copyright__notice</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">15px</span></span><br><span class="line">  <span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在写文章时，在 <a href="https://butterfly.js.org/posts/dc584b87/#Front-matter">Front-matter</a> 中可重写</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试 # 文章名称</span><br><span class="line">date: 2022-09-12 13:52:46 # 文章发布日期</span><br><span class="line">updated: 202-0-12 13:52:46 # 文章更新日期</span><br><span class="line">copyright<span class="emphasis">_author:  # 作者覆写</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:  # 原文链接覆写</span><br><span class="line">license: # 许可协议名称覆写</span><br><span class="line"><span class="section">license<span class="emphasis">_url: # 许可协议链接覆写</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="13-将图片放到文章中"><a href="#13-将图片放到文章中" class="headerlink" title="13. 将图片放到文章中"></a>13. 将图片放到文章中</h4><ul><li><p>效果如下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220912102854073.png" alt="image-20220912102854073"></p></li></ul><ul><li><p>在 source/css/ 文件夹下创建 modify.css 并添加以下内容</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;nib&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶部图</span></span><br><span class="line"><span class="selector-id">#page-header</span></span><br><span class="line">  &amp;, <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span></span><br><span class="line">  &amp;<span class="selector-class">.post-bg</span>, &amp;<span class="selector-class">.not-home-page</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span> <span class="meta">!important</span></span><br><span class="line">  <span class="selector-id">#post-info</span></span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">40px</span> <span class="meta">!important</span></span><br><span class="line">  <span class="selector-id">#page-site-info</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">140px</span> <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)</span><br><span class="line">    &amp;.not-home-page</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span> !important</span><br><span class="line">    #post-info</span><br><span class="line">      bottom: <span class="number">10px</span> !important</span><br><span class="line">    #page-site-info</span><br><span class="line">      top: <span class="number">100px</span> !important</span><br><span class="line"></span><br><span class="line">.top-img</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span></span><br><span class="line">  margin: -<span class="number">50px</span> -<span class="number">40px</span> <span class="number">50px</span></span><br><span class="line">  border-top-left-radius: inherit</span><br><span class="line">  border-top-right-radius: inherit</span><br><span class="line">  background-position: center center</span><br><span class="line">  background-size: cover</span><br><span class="line">  transition: all <span class="number">0.3s</span></span><br><span class="line"></span><br><span class="line">  @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">230px</span></span><br><span class="line">    margin: -<span class="number">36px</span> -<span class="number">14px</span> <span class="number">36px</span></span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    filter: brightness(<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">// 页脚</span><br><span class="line">#footer:before</span><br><span class="line">  background-color: alpha(#FFF, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    background-color: alpha(#<span class="number">000</span>, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">#footer-wrap, #footer-wrap a</span><br><span class="line">  <span class="attribute">color</span>: #<span class="number">111</span></span><br><span class="line">  transition: unset</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    <span class="attribute">color</span>: var(--light-grey)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 _config.butterfly.yml 中找到下面配置，并加入以下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/modify.css&quot;&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>增加插件脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为使用了 cheerio 来解析 HTML，所以需要先安装此依赖。</span></span><br><span class="line">npm install cheerio</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到 \node_modules\hexo-theme-butterfly\scripts 文件夹，创建 modify.js，加入以下内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在页面插入新顶部图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">cheerio.Root</span>&#125; $ Root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertTopImg</span>(<span class="params">$</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> header = $(<span class="string">&#x27;#page-header&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (header.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> background = header.<span class="title function_">css</span>(<span class="string">&#x27;background-image&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!background) <span class="keyword">return</span>;</span><br><span class="line">    $(<span class="string">&#x27;#post, #page, #archive, #tag, #category&#x27;</span>).<span class="title function_">prepend</span>(<span class="string">`&lt;div class=&quot;top-img&quot; style=&quot;background-image: <span class="subst">$&#123;background&#125;</span>;&quot;&gt;&lt;/div&gt;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_render:html&#x27;</span>, <span class="keyword">function</span>(<span class="params">str, data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(str, &#123;</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">insertTopImg</span>($);</span><br><span class="line">    <span class="keyword">return</span> $.<span class="title function_">html</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>然后就可以啦</li></ul><h4 id="14-特定节日网站变灰"><a href="#14-特定节日网站变灰" class="headerlink" title="14. 特定节日网站变灰"></a>14. 特定节日网站变灰</h4><ul><li><p>在source创建 js 文件夹，然后创建名为 grayscale.js 的文件，添加以下内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主要是把重要节日放到函数里面，然后进行拼接判断，从而来判断网站是否变灰</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">PublicSacrificeDay</span>())&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;filter:gray !important;filter:grayscale(100%);-webkit-filter:grayscale(100%);-moz-filter:grayscale(100%);-ms-filter:grayscale(100%);-o-filter:grayscale(100%);&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PublicSacrificeDay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">PSFarr</span>=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;0403&quot;</span>,<span class="string">&quot;0404&quot;</span>,<span class="string">&quot;0405&quot;</span>,<span class="string">&quot;0406&quot;</span>,<span class="string">&quot;0414&quot;</span>,<span class="string">&quot;0512&quot;</span>,<span class="string">&quot;0707&quot;</span>,<span class="string">&quot;0807&quot;</span>,<span class="string">&quot;0814&quot;</span>,<span class="string">&quot;0909&quot;</span>,<span class="string">&quot;0918&quot;</span>,<span class="string">&quot;0930&quot;</span>,<span class="string">&quot;1025&quot;</span>,<span class="string">&quot;1213&quot;</span>);</span><br><span class="line">    <span class="comment">//2020年4月4日 新冠肺炎哀悼日，清明节</span></span><br><span class="line">    <span class="comment">//2010年4月14日，青海玉树地震</span></span><br><span class="line">    <span class="comment">//2008年5月12日，四川汶川地震</span></span><br><span class="line">    <span class="comment">//1937年7月7日,七七事变 又称卢沟桥事变</span></span><br><span class="line">    <span class="comment">//2010年8月7日，甘肃舟曲特大泥石流</span></span><br><span class="line">    <span class="comment">//8月14日，世界慰安妇纪念日</span></span><br><span class="line">    <span class="comment">//1976年9月9日，毛主席逝世</span></span><br><span class="line">    <span class="comment">//1931年9月18日，九一八事变</span></span><br><span class="line">    <span class="comment">//烈士纪念日为每年9月30日</span></span><br><span class="line">    <span class="comment">//1950年10月25日，抗美援朝纪念日</span></span><br><span class="line">    <span class="comment">//1937年12月13日，南京大屠杀</span></span><br><span class="line">    <span class="keyword">var</span> currentdate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> mm = currentdate.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(currentdate.<span class="title function_">getMonth</span>()&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        str += mm;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str += <span class="string">&quot;0&quot;</span> + mm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(currentdate.<span class="title function_">getDate</span>()&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        str += currentdate.<span class="title function_">getDate</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str += <span class="string">&quot;0&quot;</span> + currentdate.<span class="title function_">getDate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">PSFarr</span>.<span class="title function_">indexOf</span>(str)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后将 js 代码加入主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/grayscale.js&quot;&gt;&lt;/script&gt;</span> <span class="comment"># 特定日期，网站变灰</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>参考博客：<a href="https://akilar.top/posts/ebf20e02/#%E9%BC%A0%E6%A0%87%E6%8C%87%E9%92%88%E6%A0%B7%E5%BC%8F%E6%9B%BF%E6%8D%A2">https://akilar.top/posts/ebf20e02/#%E9%BC%A0%E6%A0%87%E6%8C%87%E9%92%88%E6%A0%B7%E5%BC%8F%E6%9B%BF%E6%8D%A2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 搭建博客（二）</title>
      <link href="//post/903fbd1d10a6/"/>
      <url>//post/903fbd1d10a6/</url>
      
        <content type="html"><![CDATA[<h2 id="二、搭建博客"><a href="#二、搭建博客" class="headerlink" title="二、搭建博客"></a>二、搭建博客</h2><h4 id="1-首先利用-npm-进行-hexo-的全局安装"><a href="#1-首先利用-npm-进行-hexo-的全局安装" class="headerlink" title="1. 首先利用 npm  进行 hexo 的全局安装"></a>1. 首先利用 npm  进行 hexo 的全局安装</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若 npm 安装较慢，我们可以更改为阿里源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">set</span> <span class="string">registry</span> <span class="string">https://registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">get</span> <span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="string">npm</span> <span class="string">insatll</span> <span class="string">hexo</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否成功</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">version</span>  </span><br></pre></td></tr></table></figure><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828143613662.png" alt="image-20220828143613662"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828143843502.png" alt="image-20220828143843502"></p></li></ul><h4 id="2-使用-hexo-初始化博客"><a href="#2-使用-hexo-初始化博客" class="headerlink" title="2.  使用 hexo 初始化博客"></a>2.  使用 hexo 初始化博客</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先，创建一个文件夹，然后进入，在这个文件夹里进行博客的初始化，也为了后面好进行管理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意此时的 name为 你想要起的名字</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">init</span> <span class="string">name</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化完成后，会在相应的文件夹里出现你所使用的名字，例如我这里是 blog</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先切换目录，进到你的项目中</span></span><br><span class="line"><span class="string">cd</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后安装 npm 依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时就可以进行本地预览博客啦</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">serve</span></span><br></pre></td></tr></table></figure><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828145103372.png" alt="image-20220828145103372"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828150034382.png" alt="image-20220828150034382"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828150225804.png" alt="image-20220828150225804"></p></li></ul><p>预览结果如下</p><hr><ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828150337354.png" alt="image-20220828150337354"></li></ul><h4 id="3-创建一个github账号，利用-github-进行博客的推送"><a href="#3-创建一个github账号，利用-github-进行博客的推送" class="headerlink" title="3.  创建一个github账号，利用 github 进行博客的推送"></a>3.  创建一个github账号，利用 github 进行博客的推送</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个 github 仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仓库名最好与前面保持一致，然后在仓库名后面加上 .github.io，然后进行创建</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828151619453.png" alt="image-20220828151619453"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828151748550.png" alt="image-20220828151748550"></p></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建成功后，进行配置， user.name 与创建时的用户名保持一致</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;960551423z&quot;</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;960551423@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后使用 vscode 打开博客项目，找到 _config.yml 进行配置</span></span><br><span class="line"><span class="string">type</span> <span class="string">代表使用的类型，此时使用</span> <span class="string">git</span></span><br><span class="line"><span class="string">repo</span> <span class="string">代表仓库的地址，即刚创建的地址</span></span><br><span class="line"><span class="string">branch</span> <span class="string">代表仓库的分支，一般使用默认的分支，即</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828152250183.png" alt="image-20220828152250183"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828152653270.png" alt="image-20220828152653270"></p></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开终端，找到项目的文件夹，然后安装 git 部署的依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代码上传到 github 上去，此时可能需要授权，登录，执行成功后，可以看到 github 仓库中有代码，如下面图</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="comment"># 清除缓存</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># 生成静态文件</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">deploy</span> <span class="comment"># 进行部署到 github 上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828153111701.png" alt="image-20220828153111701"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828153825944.png" alt="image-20220828153825944"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828153934265.png" alt="image-20220828153934265"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828154042465.png" alt="image-20220828154042465"></p></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击仓库中的设置，可看下面的图，此时点击链接，即可访问网站</span></span><br></pre></td></tr></table></figure><ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828154251047.png" alt="image-20220828154251047"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828154452312.png" alt="image-20220828154452312"></p></li><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828154539624.png" alt="image-20220828154539624"></p></li></ul><h4 id="4-配置文件讲解"><a href="#4-配置文件讲解" class="headerlink" title="4. 配置文件讲解"></a>4. 配置文件讲解</h4><ul><li><p># title</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828160307308.png" alt="image-20220828160307308"></p></li></ul><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828160432965.png" alt="image-20220828160432965"></p><ul><li><p># url</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828160652000.png" alt="image-20220828160652000"></p></li></ul><ul><li><p>当我们写好博客好，将文件放到 source 下面的 _posts 目录下，然后进行上传</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新生成静态文件</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到 github 仓库中</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828161516736.png" alt="image-20220828161516736"></p></li></ul><ul><li><p>对博客进行美化，在 github 中进行搜索，然后查看文档，使用npm进行安装，应用主题，可根据文档来进行后续操作</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装主题</span></span><br><span class="line"><span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-theme-butterfly</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题文档地址链接</span></span><br><span class="line"><span class="string">https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题页面链接</span></span><br><span class="line"><span class="string">https://butterfly.js.org/posts/dc584b87/</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828162452766.png" alt="image-20220828162452766"></p></li></ul><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828162530835.png" alt="image-20220828162530835"></p><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828162619952.png" alt="image-20220828162619952"></p><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828162716902.png" alt="image-20220828162716902"></p><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828162844544.png" alt="image-20220828162844544"></p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 pug 以及 stylus 的渲染器</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成静态文件</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地运行查看效果</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828163129958.png" alt="image-20220828163129958"></p><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828163459729.png" alt="image-20220828163459729"></p><ul><li><p>若跳转没有找到，则显示404</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在node_moddules 下找到 hexo-theme-butterfly 目录，找到其 _config.yml 配置文件</span></span><br><span class="line"><span class="comment"># 将其内容 ctrl + a，crtl + c</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828165521120.png" alt="image-20220828165521120"></p></li></ul>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 _config.butterfly.yml 文件，将刚复制的东西 粘贴到里面</span></span><br></pre></td></tr></table></figure><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828165635768.png" alt="image-20220828165635768"></p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ctrl + f 搜索 404</span></span><br><span class="line"></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828165742959.png" alt="image-20220828165742959"></p><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828170012848.png" alt="image-20220828170012848"></p><ul><li><p>git 的版本仓库</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先创建一个 github 仓库，将其设置私有</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828170620575.png" alt="image-20220828170620575"></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 .gitignore，由此来忽略掉上传 github 不需要的一些文件</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828170745567.png" alt="image-20220828170745567"></p></li></ul>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="string">git</span> <span class="string">init</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有到缓存中</span></span><br><span class="line"><span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地，并进行了说明</span></span><br><span class="line"><span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;first commit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line"><span class="string">git</span> <span class="string">branch</span> <span class="string">-M</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">origin</span> <span class="string">https://github.com/960551423z/blog.git</span></span><br><span class="line"></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">-u</span> <span class="string">origin</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//3499image-20220828171208818.png" alt="image-20220828171208818"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
